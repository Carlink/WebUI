{
    "components": {
        "schemas": {
            "User": {
                "title": "User",
                "type": "object",
                "description": "User model",
                "x-examples": {
                    "User": {
                        "id": "d463677e-2060-4db0-8985-35585a8bc90c",
                        "name": "don.johnson",
                        "first": "Don",
                        "last": "Johnson",
                        "email": "don.johnson@activeprime.com",
                        "status": "enabled",
                        "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                        "role_id": "2473c912-ea9c-4f89-8d85-32e39cb8275f",
                        "account_id": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5",
                        "created": "2018-11-13T20:20:39+00:00",
                        "modifed": "2018-11-13T20:20:39+00:00",
                        "last_login": "2018-11-13T20:20:39+00:00",
                        "is_owner": false,
                        "manager_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe"
                    }
                },
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "d463677e-2060-4db0-8985-35585a8bc90c"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "enabled",
                            "disabled"
                        ],
                        "example": "enabled"
                    },
                    "first": {
                        "type": "string",
                        "example": "Don"
                    },
                    "last": {
                        "type": "string",
                        "example": "Johnson"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "example": "don.johnson@activeprime.com"
                    },
                    "role_id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "2473c912-ea9c-4f89-8d85-32e39cb8275f",
                        "description": "The ID of the primary Role for this User"
                    },
                    "account_id": {
                        "type": "string",
                        "description": "The ID of the primary Account of this User",
                        "format": "uuid",
                        "example": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5"
                    },
                    "owner_id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                        "description": "The ID of the Owner of this record."
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-11-13T20:20:39+00:00"
                    },
                    "modified": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-11-13T20:20:39+00:00"
                    },
                    "object": {
                        "type": "string",
                        "enum": [
                            "user"
                        ],
                        "example": "user",
                        "pattern": "user"
                    },
                    "last_login": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-11-13T20:20:39+00:00"
                    },
                    "is_owner": {
                        "type": "boolean",
                        "description": "True if this user is considered owner of associated Account. Any number of users can be considered owners.",
                        "example": "false"
                    },
                    "manager_id": {
                        "type": "string",
                        "description": "This users's manager",
                        "format": "uuid",
                        "example": "090e24d3-34c6-49cb-846b-57af9cbff1fe"
                    }
                },
                "required": [
                    "id",
                    "status",
                    "first",
                    "last",
                    "email",
                    "role_id",
                    "account_id",
                    "owner_id",
                    "created",
                    "modified",
                    "object",
                    "last_login",
                    "is_owner",
                    "manager_id"
                ]
            },
            "CreateUser": {
                "title": "CreateUser",
                "type": "object",
                "description": "Create user model",
                "x-examples": {
                    "Create User Example": {
                        "first": "Don",
                        "last": "Johnson",
                        "email": "don.johnson@activeprime.com",
                        "status": "enabled",
                        "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                        "role_id": "2473c912-ea9c-4f89-8d85-32e39cb8275f",
                        "account_id": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5",
                        "manager_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe"
                    }
                },
                "properties": {
                    "status": {
                        "type": "string",
                        "enum": [
                            "enabled",
                            "disabled"
                        ],
                        "example": "enabled"
                    },
                    "first": {
                        "type": "string",
                        "example": "Don"
                    },
                    "last": {
                        "type": "string",
                        "example": "Johnson"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "example": "don.johnson@activeprime.com"
                    },
                    "role_id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "2473c912-ea9c-4f89-8d85-32e39cb8275f",
                        "description": "The ID of the primary Role for this User"
                    },
                    "account_id": {
                        "type": "string",
                        "description": "The ID of the primary Account of this User",
                        "format": "uuid",
                        "example": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5"
                    },
                    "owner_id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                        "description": "The ID of the Owner of this record."
                    },
                    "object": {
                        "type": "string",
                        "enum": [
                            "user"
                        ],
                        "example": "user",
                        "pattern": "user"
                    },
                    "manager_id": {
                        "type": "string",
                        "description": "This users's manager",
                        "format": "uuid",
                        "example": "090e24d3-34c6-49cb-846b-57af9cbff1fe"
                    }
                },
                "required": [
                    "status",
                    "first",
                    "last",
                    "email",
                    "role_id",
                    "account_id",
                    "owner_id",
                    "object",
                    "manager_id"
                ]
            },
            "Role": {
                "title": "Role",
                "type": "object",
                "x-examples": {
                    "Role": {
                        "id": "d463677e-2060-4db0-8985-35585a8bc90c",
                        "object": "role",
                        "name": "Data Steward",
                        "account_id": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5",
                        "description": "The standard Data Steward role",
                        "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                        "created": "2018-11-13T20:20:39+00:00",
                        "modifed": "2018-11-13T20:20:39+00:00"
                    }
                },
                "description": "Role model",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "3b69f870-fe95-4ee1-9199-a97f17f14577"
                    },
                    "object": {
                        "type": "string",
                        "enum": [
                            "role"
                        ],
                        "example": "role",
                        "pattern": "role"
                    },
                    "modified": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-11-13T20:20:39+00:00"
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-11-13T20:20:39+00:00"
                    },
                    "owner_id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                        "description": "The ID of the Owner of this record."
                    },
                    "name": {
                        "type": "string",
                        "example": "Data Steward"
                    },
                    "description": {
                        "type": "string",
                        "example": "The standard Data Steward role."
                    },
                    "account_id": {
                        "type": "string",
                        "example": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5"
                    }
                },
                "required": [
                    "id",
                    "object",
                    "modified",
                    "created",
                    "owner_id",
                    "name",
                    "description",
                    "account_id"
                ]
            },
            "MultiMap": {
                "title": "MultiMap",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "8d43b2ac-ae41-4b5d-b928-0b80dbabc1cb"
                    },
                    "object": {
                        "type": "string",
                        "example": "multimap",
                        "pattern": "multimap",
                        "enum": [
                            "multimap"
                        ]
                    },
                    "modified": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-11-13T20:20:39+00:00"
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-11-13T20:20:39+00:00"
                    },
                    "owner_id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "090e24d3-34c6-49cb-846b-57af9cbff1fe"
                    },
                    "name": {
                        "type": "string",
                        "example": "Dreamforce A-L map"
                    },
                    "description": {
                        "type": "string",
                        "example": "Account and Lead mapping for SF Dreamforce 2020."
                    },
                    "connection_id": {
                        "type": "string",
                        "description": "The id of the connection this MultiMap's objects and fields come frome. For example, the id of a connection to a Salesforce production org.",
                        "example": "9b40c303-4fce-4482-89a3-6df6a1eea6df"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "[\"Company Name\", \"Phone\"]"
                        }
                    },
                    "entity_field_maps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EntityFieldMap"
                        }
                    }
                },
                "required": [
                    "id",
                    "object",
                    "modified",
                    "created",
                    "owner_id",
                    "name",
                    "description"
                ],
                "x-examples": {
                    "Example MultiMap": {
                        "id": "8d43b2ac-ae41-4b5d-b928-0b80dbabc1cb",
                        "object": "multimap",
                        "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                        "created": "2018-11-13T20:20:39+00:00",
                        "modifed": "2018-11-13T20:20:39+00:00",
                        "connection_id": "9b40c303-4fce-4482-89a3-6df6a1eea6df",
                        "name": "Dreamforce A-L map",
                        "description": "Account and Lead mapping for SF Dreamforce 2020.",
                        "labels": [
                            "Company Name",
                            "Main Phone"
                        ],
                        "entity_field_maps": [
                            {
                                "id": "b995077d-d8de-4385-96ce-8222bcebfcfc",
                                "entity_name": "Account",
                                "entity_type": "Company",
                                "fields": [
                                    "Name",
                                    "Phone"
                                ],
                                "field_types": [
                                    "CompanyName",
                                    "Phone"
                                ]
                            },
                            {
                                "id": "c995077d-d8de-4385-96ce-8222bcebfcfc",
                                "entity_name": "Lead",
                                "entity_type": "Lead",
                                "fields": [
                                    "Company",
                                    "Phone"
                                ],
                                "field_types": [
                                    "CompanyName",
                                    "Phone"
                                ]
                            }
                        ]
                    }
                }
            },
            "EntityFieldMap": {
                "title": "EntityFieldMap",
                "type": "object",
                "x-examples": {
                    "Example EntityFieldMap": {
                        "id": "b995077d-d8de-4385-96ce-8222bcebfcfc",
                        "object": "entityfieldmap",
                        "entity_name": "Account",
                        "entity_type": "Company",
                        "fields": [
                            "Name",
                            "Phone"
                        ],
                        "field_types": [
                            "CompanyName",
                            "Phone"
                        ]
                    }
                },
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "b995077d-d8de-4385-96ce-8222bcebfcfc",
                        "description": "UUID of this EntityFieldMap"
                    },
                    "entity_name": {
                        "type": "string",
                        "example": "Account",
                        "description": "The name of the entity."
                    },
                    "entity_type": {
                        "type": "string",
                        "example": "Company",
                        "description": "The type of the entity."
                    },
                    "fields": {
                        "type": "array",
                        "description": "The name of the fieelds to map.",
                        "items": {
                            "type": "string",
                            "example": "[\"Name\",\"Phone\"]"
                        }
                    },
                    "field_types": {
                        "type": "array",
                        "description": "The types of each field.",
                        "items": {
                            "type": "string",
                            "example": "[\"CompanyName\",\"Phone\"]"
                        }
                    },
                    "object": {
                        "type": "string",
                        "example": "entityfieldmap",
                        "enum": [
                            "entityfieldmap"
                        ]
                    }
                },
                "required": [
                    "id",
                    "entity_name",
                    "entity_type",
                    "fields",
                    "field_types",
                    "object"
                ]
            },
            "Account": {
                "title": "Account",
                "type": "object",
                "x-examples": {
                    "Account": {
                        "id": "d463677e-2060-4db0-8985-35585a8bc90c",
                        "object": "account",
                        "name": "Johnson Soaps",
                        "url": "https://acmewidgets.com",
                        "email_domain": "acmewidgets.com",
                        "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                        "created": "2018-11-13T20:20:39+00:00",
                        "modifed": "2018-11-13T20:20:39+00:00"
                    }
                },
                "description": "Account model",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "7e45efc7-e99d-456d-810f-53eaa2cac8ce"
                    },
                    "object": {
                        "type": "string",
                        "enum": [
                            "account"
                        ],
                        "example": "account",
                        "pattern": "account"
                    },
                    "modified": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-11-13T20:20:39+00:00"
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-11-13T20:20:39+00:00"
                    },
                    "owner_id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                        "description": "The ID of the Owner of this record."
                    },
                    "name": {
                        "type": "string",
                        "example": "Johnson Soaps"
                    },
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "example": "https://johnsonsoaps.com"
                    },
                    "email_domain": {
                        "type": "string",
                        "example": "acmewidgets.com",
                        "description": "The email domain that restricts where user invitation emails can be sent when signing up new users for an Account."
                    }
                },
                "required": [
                    "id",
                    "object",
                    "modified",
                    "created",
                    "owner_id",
                    "name",
                    "url",
                    "email_domain"
                ]
            },
            "Function": {
                "title": "Function",
                "type": "object",
                "x-examples": {
                    "Function": {
                        "id": "91b82596-87a3-499f-8bd9-2c70df831a99",
                        "object": "function",
                        "key": "CleanEnter.SelectMaster",
                        "description": "Enable or disable the master selection on the dupe grid within CleanEnter.",
                        "enabled": false,
                        "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                        "created": "2018-11-13T20:20:39+00:00",
                        "modifed": "2018-11-13T20:20:39+00:00"
                    }
                },
                "description": "Function model",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "34ee928d-9900-4e68-9ef6-b1cc78368395",
                        "format": "uuid"
                    },
                    "description": {
                        "type": "string",
                        "example": "CleanEnter dupe grid can have master selection enabled/disabled."
                    },
                    "key": {
                        "type": "string",
                        "description": "The function key (dot notation) like CleanEnter.SelectMaster",
                        "example": "CleanEnter.SelectMaster"
                    },
                    "enabled": {
                        "type": "boolean",
                        "example": "false"
                    },
                    "modified": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-11-13T20:20:39+00:00",
                        "description": "True if the function is enabled, else not enabled."
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-11-13T20:20:39+00:00"
                    },
                    "owner_id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                        "description": "The ID of the Owner of this record."
                    }
                },
                "required": [
                    "id",
                    "description",
                    "key",
                    "enabled",
                    "modified",
                    "created",
                    "owner_id"
                ]
            },
            "License": {
                "title": "License",
                "type": "object",
                "x-examples": {
                    "License": {
                        "id": "70f32caa-12a2-49f1-9095-dce9f188890c",
                        "object": "license",
                        "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                        "created": "2018-11-13T20:20:39+00:00",
                        "modifed": "2018-11-13T20:20:39+00:00",
                        "start": "2018-11-13T20:20:39+00:00",
                        "end": "2020-11-13T20:20:39+00:00",
                        "account_id": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5",
                        "apps": [
                            "ccrm"
                        ],
                        "user_count": 10
                    }
                },
                "description": "License model",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "70f32caa-12a2-49f1-9095-dce9f188890c"
                    },
                    "object": {
                        "type": "string",
                        "enum": [
                            "license"
                        ],
                        "example": "license",
                        "pattern": "license"
                    },
                    "modified": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-11-13T20:20:39+00:00"
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-11-13T20:20:39+00:00"
                    },
                    "owner_id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                        "description": "The ID of the Owner of this record."
                    },
                    "end": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2020-11-13T20:20:39+00:00"
                    },
                    "start": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-11-13T20:20:39+00:00"
                    },
                    "account_id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5"
                    },
                    "apps": {
                        "type": "array",
                        "enum": [
                            "ccrm",
                            "ci",
                            "cu",
                            "ce"
                        ],
                        "example": "[corm]",
                        "items": {
                            "type": "string"
                        }
                    },
                    "user_count": {
                        "type": "integer",
                        "example": "10",
                        "description": "The number of licensed users."
                    }
                },
                "required": [
                    "id",
                    "object",
                    "modified",
                    "created",
                    "owner_id",
                    "end",
                    "start",
                    "account_id",
                    "apps",
                    "user_count"
                ]
            },
            "FunctionUpsert": {
                "title": "FunctionUpsert",
                "type": "object",
                "x-examples": {
                    "FunctionUpsert": {
                        "enabled": false,
                        "description": "All CleanData Admin functionality",
                        "key": "app.admin"
                    }
                },
                "properties": {
                    "key": {
                        "type": "string",
                        "example": "app.admin"
                    },
                    "description": {
                        "type": "string",
                        "example": "All CleanData Admin functionality"
                    },
                    "enabled": {
                        "type": "boolean",
                        "example": "false"
                    }
                }
            },
            "Rule": {
                "title": "Rule",
                "type": "object",
                "x-examples": {
                    "Rule": {
                        "id": "a5409032-6ca8-4953-98a4-a1349f7f60e7",
                        "object": "rule",
                        "name": "usa_accounts",
                        "description": "Filter accounts in USA",
                        "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                        "created": "2018-11-13T20:20:39+00:00",
                        "modifed": "2018-11-13T20:20:39+00:00",
                        "type": "Filter",
                        "rule": "{}",
                        "status": "active",
                        "account_id": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5",
                        "entities": [
                            "account"
                        ]
                    }
                },
                "description": "Rule model",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "a5409032-6ca8-4953-98a4-a1349f7f60e7"
                    },
                    "object": {
                        "type": "string",
                        "example": "rule",
                        "pattern": "rule",
                        "enum": [
                            "rule"
                        ]
                    },
                    "modified": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-11-13T20:20:39+00:00"
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-11-13T20:20:39+00:00"
                    },
                    "owner_id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                        "description": "The ID of the Owner of this record."
                    },
                    "name": {
                        "type": "string",
                        "example": "Match leads and accounts"
                    },
                    "description": {
                        "type": "string",
                        "example": "Find matches across Account and Lead records"
                    },
                    "rule": {
                        "type": "string",
                        "description": "The rule itself, as JSON.",
                        "example": "{}"
                    },
                    "type": {
                        "type": "string",
                        "description": "The rule type.",
                        "enum": [
                            "PreCleanse",
                            "Filter",
                            "MatchCriteria",
                            "MatchConfidenceScore",
                            "Merge",
                            "Assignment",
                            "Write",
                            "write"
                        ],
                        "example": "match"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive",
                            "draft"
                        ],
                        "example": "active",
                        "description": "The status of the rule. Is it a draft, active (in production) or inactive (out of production)."
                    },
                    "account_id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5"
                    },
                    "entities": {
                        "type": "array",
                        "description": "The list of enitties this rule can be applied to.",
                        "items": {
                            "type": "string",
                            "example": "[\"account\"]"
                        }
                    }
                },
                "required": [
                    "id",
                    "object",
                    "modified",
                    "created",
                    "owner_id",
                    "account_id",
                    "name",
                    "description",
                    "rule",
                    "entities",
                    "type"
                ]
            },
            "Agent": {
                "title": "Agent",
                "type": "object",
                "x-examples": {
                    "Agent": {
                        "id": "f836910e-a00f-415b-895d-c0775bcc4bd0",
                        "object": "agent",
                        "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                        "created": "2018-11-13T20:20:39+00:00",
                        "modifed": "2018-11-13T20:20:39+00:00",
                        "account_id": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5",
                        "name": "Main dupe detection",
                        "description": "Find duplicates across Account and Lead records"
                    }
                },
                "description": "Agent model",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "f836910e-a00f-415b-895d-c0775bcc4bd0"
                    },
                    "object": {
                        "type": "string",
                        "enum": [
                            "agent"
                        ],
                        "example": "agent",
                        "pattern": "agent"
                    },
                    "modified": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-11-13T20:20:39+00:00"
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-11-13T20:20:39+00:00"
                    },
                    "owner_id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "090e24d3-34c6-49cb-846b-57af9cbff1fe"
                    },
                    "account_id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5"
                    },
                    "name": {
                        "type": "string",
                        "example": "Main dupe detection"
                    },
                    "description": {
                        "type": "string",
                        "example": "Find duplicates across Account and Lead records"
                    }
                },
                "required": [
                    "id",
                    "object",
                    "modified",
                    "created",
                    "owner_id",
                    "account_id",
                    "name",
                    "description"
                ]
            },
            "AgentUpsert": {
                "title": "AgentUpsert",
                "type": "object",
                "description": "Update or Insert Agent",
                "x-examples": {
                    "Create Agent": {
                        "object": "agent",
                        "name": "Main dupe detection",
                        "description": "Find duplicates across Account and Lead records"
                    }
                },
                "properties": {
                    "object": {
                        "type": "string",
                        "enum": [
                            "agent"
                        ],
                        "example": "agent",
                        "pattern": "agent"
                    },
                    "name": {
                        "type": "string",
                        "example": "Main dupe detection"
                    },
                    "description": {
                        "type": "string",
                        "example": "Find duplicates across Account and Lead records"
                    }
                },
                "required": [
                    "object",
                    "name"
                ]
            },
            "DupeSetResponse": {
                "title": "DupeSet",
                "type": "object",
                "x-examples": {
                    "DupeSet": {
                        "id": "010a8566-52c4-4add-a64f-5d423c121612",
                        "object": "dupeset",
                        "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                        "created": "2018-11-13T20:20:39+00:00",
                        "modifed": "2018-11-13T20:20:39+00:00",
                        "account_id": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5",
                        "action": "merge",
                        "estimated_seconds_to_complete": 120,
                        "columns": [
                            {
                                "id": "070b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                "name": "primary",
                                "label": "Primary",
                                "conflicted": false,
                                "selectable": true,
                                "locked": true,
                                "is_primary": true
                            },
                            {
                                "id": "170b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                "name": "source",
                                "label": "Source",
                                "conflictable": false,
                                "locked": true,
                                "selectable": false
                            },
                            {
                                "id": "270b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                "name": "name",
                                "label": "Name",
                                "conflictable": true,
                                "locked": false,
                                "selectable": true
                            },
                            {
                                "id": "370b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                "name": "street",
                                "label": "Billing Street",
                                "conflictable": true,
                                "locked": false,
                                "selectable": true
                            },
                            {
                                "id": "470b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                "name": "lead_source",
                                "label": "Lead Source",
                                "conflictable": true,
                                "locked": true,
                                "selectable": false
                            },
                            {
                                "id": "0af584d5-f376-4ec0-a38f-3284a4f2f789",
                                "name": "type",
                                "label": "Record Type",
                                "conflictable": true,
                                "locked": true,
                                "selectable": false
                            },
                            {
                                "id": "7fc58388-1aeb-4456-b99b-f60f9aaafc95",
                                "name": "state",
                                "label": "Billing State",
                                "conflictable": true,
                                "locked": true,
                                "selectable": false
                            },
                            {
                                "id": "31da82be-6bc9-4417-ba1a-e70e05f645bc",
                                "name": "description",
                                "label": "Description",
                                "conflictable": true,
                                "locked": true,
                                "selectable": false,
                                "combine": true
                            },
                            {
                                "id": "33eae0ca-4a76-4cfe-8d5b-53c6aef53fc1",
                                "name": "phone",
                                "label": "Phone Number",
                                "conflictable": true,
                                "locked": true,
                                "selectable": false
                            },
                            {
                                "id": "962a817e-9b2e-4fd6-ba8c-72c4df3578a1",
                                "name": "email",
                                "label": "Email",
                                "conflictable": true,
                                "locked": true,
                                "selectable": false
                            },
                            {
                                "id": "21a3e634-1dcd-4aa9-a9cb-bc81bf343bf7",
                                "name": "website",
                                "label": "Website",
                                "conflictable": true,
                                "locked": true,
                                "selectable": false
                            }
                        ],
                        "rows": [
                            {
                                "id": "36d6da28-4af3-4a31-9a74-63ea18db47fc",
                                "locked": false,
                                "never_merge_enabled": false,
                                "data": {
                                    "source": "Account",
                                    "name": "First Alarm",
                                    "street": "2335 N. Michigan Avenue",
                                    "lead_source": "",
                                    "type": "Person",
                                    "state": "New York",
                                    "description": "First person",
                                    "phone": "(785)241-6202",
                                    "email": "First.Alarm@ny.com",
                                    "website": "www.FirstAlarm.com"
                                }
                            },
                            {
                                "id": "46d6da28-4af3-4a31-9a74-63ea18db47fc",
                                "locked": false,
                                "data": {
                                    "source": "Account",
                                    "name": "First Alarm",
                                    "street": "2335 Michigan Avenue",
                                    "lead_source": "",
                                    "state": "New York",
                                    "phone": "(785)241-6201"
                                }
                            }
                        ],
                        "cells": [
                            {
                                "column_id": "070b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                "row_id": "36d6da28-4af3-4a31-9a74-63ea18db47fc",
                                "selected": true
                            },
                            {
                                "column_id": "470b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                "row_id": "36d6da28-4af3-4a31-9a74-63ea18db47fc",
                                "locked": true,
                                "selected": true
                            }
                        ],
                        "final_record": {
                            "source": "Account",
                            "name": "First Alarm",
                            "street": "2335 Michigan Avenue",
                            "lead_source": "",
                            "state": "New York",
                            "phone": "(785)241-6201"
                        },
                        "final_record_editable_cells": [
                            "street",
                            "state",
                            "phone"
                        ],
                        "bonus_points_countdown_seconds": 100
                    }
                },
                "description": "A duplicate set (DupeSet) which is a list of records that have been identified as duplicates of one another.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "010a8566-52c4-4add-a64f-5d423c121612",
                        "description": "The UUID of this dupe set in CleanData."
                    },
                    "object": {
                        "type": "string",
                        "enum": [
                            "agent"
                        ],
                        "example": "agent",
                        "pattern": "agent",
                        "description": "The type of object, which is always set to dupeset."
                    },
                    "modified": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-11-13T20:20:39+00:00",
                        "description": "The datetime this dupe grid was modified."
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-11-13T20:20:39+00:00",
                        "description": "The datetime this dupe grid was created."
                    },
                    "owner_id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                        "description": "The UUID of the owner in CleanData."
                    },
                    "account_id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5",
                        "description": "The UUID of the account in CleanData. This is NOT the id of an account entity in a CRM system."
                    },
                    "estimated_seconds_to_complete": {
                        "type": "integer",
                        "example": "30",
                        "description": "The number of seconds it is expected it will take a user to complete their dedupe work on this dupe set."
                    },
                    "columns": {
                        "type": "array",
                        "example": "[]",
                        "description": "The column settings.\n[\n    {\n        \"id\": \"170b5a68-81a6-4772-8831-73ba1e6ceb5d\",\n        \"name\": \"source\",\n        \"label\": \"Source\",\n        \"conflicted\": false,\n        \"selectable\": false,\n        \"locked\": true,\n        \"is_primary\": false\n    }\n]\n\nIf locked is true, this row is locked.\n\nThe name is the unique column name.\n\nThe label is the value to display in the UI for this column.\n\nIf conflicted is true, this column has conflicting data and the should highlight that.\n\nIf selectable is true, this column can be selectable by the end user in the UI. This usually implies radio buttons in the column.\n\nIf locked is true, this column is locked.\n\nIf is_primary is true, this column is the primary (master) column.\n",
                        "items": {
                            "$ref": "#/components/schemas/DupeColumn"
                        }
                    },
                    "rows": {
                        "type": "array",
                        "example": "[         {             \"source\": \"Account\",             \"name\": \"First Alarm\",             \"street\": \"2335 N. Michigan Avenue\",             \"lead_source\": \"\",             \"state\": \"New York\",             \"phone\": \"(785)241-6202\"        }]",
                        "description": "A list of records. Each record (element in the list) is a dictionary with keys being the name of the column and values being the value for this field of the record. For example\n[\n    {\n        \"id\": \"16d6da28-4af3-4a31-9a74-63ea18db47fc\",\n        \"locked\": true,\n        \"never_merge_disabled\": true,\n        \"data\": {\n            \"source\": \"Lead\",\n            \"name\": \"First Alarm & Co\",\n            \"street\": \"2335 N. Michigan Avenue\",\n            \"lead_source\": \"Exposition\",\n            \"state\": \"New York\",\n            \"RecordType\": \"Marketplace\",\n            \"phone\": \"+1-213-241-6202\"\n        }\n    }\n]\n\nIf locked is true, then this row is locked.\n\nIf never_merged_disabled is true, then the user can not specify in the UI that the record should be flagged to never be merged.\n\nThe data dict is the list of field, value pairs for this row.",
                        "items": {
                            "$ref": "#/components/schemas/DupeRow"
                        }
                    },
                    "final_record": {
                        "type": "object",
                        "description": "The final record is a dictionary with keys being the name of the column and values being the value for this field of the record. For example {\"first\":\"joe\",\"last\":\"Smith\"}.",
                        "example": "{         \"source\": \"Account\",         \"name\": \"First Alarm\",         \"street\": \"2335 Michigan Avenue\",         \"lead_source\": \"\",         \"state\": \"New York\",         \"phone\": \"(785)241-6201\"     }"
                    },
                    "final_record_editable_cells": {
                        "type": "array",
                        "description": "The list of columns (fields) in the final record that can be edited (changed).",
                        "example": "[         \"street\",         \"state\",         \"phone\"     ]",
                        "items": {
                            "type": "string"
                        }
                    },
                    "cells": {
                        "type": "array",
                        "description": "An array of cells, each cell specifying the column_id and row_id of this cell (the column and row the cell is associated with), the selected boolean, which specifies if the cell is the selected value in the column, and the locked boolean which specifies if the cell is locked.",
                        "items": {
                            "$ref": "#/components/schemas/DupeCell"
                        }
                    },
                    "bonus_points_countdown_seconds": {
                        "type": "integer",
                        "example": "100",
                        "description": "Number of seconds remaining to get bonus points. NOTE that this may move to a separate REST API (for points)."
                    },
                    "action": {
                        "type": "string",
                        "enum": [
                            "merge",
                            "notify_other"
                        ],
                        "example": "merge",
                        "description": "The merge action a user can take in the UI. Either merge or notify_other. If merge, then the UI button should specify the ability to merge the record. If notify_other, then merging is not enabled, but instead the user can notify others of the status of the dupe grid."
                    }
                },
                "required": [
                    "id",
                    "object",
                    "modified",
                    "created",
                    "owner_id",
                    "account_id",
                    "estimated_seconds_to_complete",
                    "columns",
                    "rows",
                    "final_record",
                    "final_record_editable_cells",
                    "bonus_points_countdown_seconds",
                    "action"
                ]
            },
            "SearchResponse": {
                "title": "SearchResult",
                "type": "object",
                "x-examples": {
                    "SearchResult": {
                        "object": "search_result",
                        "account_id": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5",
                        "columns": [
                            {
                                "id": "070b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                "name": "primary",
                                "label": "Primary"
                            },
                            {
                                "id": "170b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                "name": "source",
                                "label": "Source"
                            },
                            {
                                "id": "270b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                "name": "name",
                                "label": "Name"
                            },
                            {
                                "id": "370b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                "name": "street",
                                "label": "Billing Street"
                            },
                            {
                                "id": "470b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                "name": "lead_source",
                                "label": "Lead Source"
                            },
                            {
                                "id": "0af584d5-f376-4ec0-a38f-3284a4f2f789",
                                "name": "type",
                                "label": "Record Type"
                            },
                            {
                                "id": "7fc58388-1aeb-4456-b99b-f60f9aaafc95",
                                "name": "state",
                                "label": "Billing State"
                            },
                            {
                                "id": "31da82be-6bc9-4417-ba1a-e70e05f645bc",
                                "name": "description",
                                "label": "Description"
                            },
                            {
                                "id": "33eae0ca-4a76-4cfe-8d5b-53c6aef53fc1",
                                "name": "phone",
                                "label": "Phone Number"
                            },
                            {
                                "id": "962a817e-9b2e-4fd6-ba8c-72c4df3578a1",
                                "name": "email",
                                "label": "Email"
                            },
                            {
                                "id": "21a3e634-1dcd-4aa9-a9cb-bc81bf343bf7",
                                "name": "website",
                                "label": "Website"
                            }
                        ],
                        "rows": [
                            {
                                "id": "36d6da28-4af3-4a31-9a74-63ea18db47fc",
                                "locked": false,
                                "data": {
                                    "source": "Account",
                                    "name": "First Alarm",
                                    "street": "2335 N. Michigan Avenue",
                                    "lead_source": "",
                                    "type": "Person",
                                    "state": "New York",
                                    "description": "First person",
                                    "phone": "(785)241-6202",
                                    "email": "First.Alarm@ny.com",
                                    "website": "www.FirstAlarm.com"
                                }
                            },
                            {
                                "id": "46d6da28-4af3-4a31-9a74-63ea18db47fc",
                                "locked": false,
                                "data": {
                                    "source": "Account",
                                    "name": "First Alarm",
                                    "street": "2335 Michigan Avenue",
                                    "lead_source": "",
                                    "state": "New York",
                                    "phone": "(785)241-6201"
                                }
                            }
                        ]
                    }
                },
                "description": "Search results. Columns and rows to display.",
                "properties": {
                    "object": {
                        "type": "string",
                        "enum": [
                            "search_result"
                        ],
                        "example": "search_result",
                        "pattern": "search_result",
                        "description": "The type of object, which is always set to search_result."
                    },
                    "columns": {
                        "type": "array",
                        "example": "[]",
                        "description": "The column settings.\n[\n    {\n        \"id\": \"170b5a68-81a6-4772-8831-73ba1e6ceb5d\",\n        \"name\": \"source\",\n        \"label\": \"Source\",\n        \"is_primary\": false\n    }\n]\n\nThe name is the unique column name.\n\nThe label is the value to display in the UI for this column.\n\nIf is_primary is true, this column is the primary (master) column.\n",
                        "items": {
                            "$ref": "#/components/schemas/SearchColumn"
                        }
                    },
                    "rows": {
                        "type": "array",
                        "example": "[         {             \"source\": \"Account\",             \"name\": \"First Alarm\",             \"street\": \"2335 N. Michigan Avenue\",             \"lead_source\": \"\",             \"state\": \"New York\",             \"phone\": \"(785)241-6202\"        }]",
                        "description": "A list of records. Each record (element in the list) is a dictionary with keys being the name of the column and values being the value for this field of the record. For example\n[\n    {\n        \"id\": \"16d6da28-4af3-4a31-9a74-63ea18db47fc\",\n        \"locked\": true,\n        \"never_merge_disabled\": true,\n        \"data\": {\n            \"source\": \"Lead\",\n            \"name\": \"First Alarm & Co\",\n            \"street\": \"2335 N. Michigan Avenue\",\n            \"lead_source\": \"Exposition\",\n            \"state\": \"New York\",\n            \"RecordType\": \"Marketplace\",\n            \"phone\": \"+1-213-241-6202\"\n        }\n    }\n]\n\nIf locked is true, then this row is locked.\n\nIf never_merged_disabled is true, then the user can not specify in the UI that the record should be flagged to never be merged.\n\nThe data dict is the list of field, value pairs for this row.",
                        "items": {
                            "$ref": "#/components/schemas/DupeRow"
                        }
                    }
                },
                "required": [
                    "object",
                    "columns",
                    "rows"
                ]
            },
            "DupeColumn": {
                "title": "DupeColumn",
                "type": "object",
                "x-examples": {
                    "Street column": {
                        "id": "370b5a68-81a6-4772-8831-73ba1e6ceb5d",
                        "name": "street",
                        "label": "Billing Street 1",
                        "conflicted": true,
                        "locked": false,
                        "selectable": true,
                        "combine": false
                    }
                },
                "description": "",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "370b5a68-81a6-4772-8831-73ba1e6ceb5d",
                        "description": "The UUID of this dupe column."
                    },
                    "name": {
                        "type": "string",
                        "example": "street",
                        "description": "The unique name of this column."
                    },
                    "label": {
                        "type": "string",
                        "example": "Billing Street 1",
                        "description": "The label (what is shown in the UI) of this column."
                    },
                    "conflicted": {
                        "type": "boolean",
                        "format": "binary",
                        "example": "true",
                        "description": "If true, the column has data that is in conflict AND the column should be highlighted in the UI to reflect that the column has conflicting data."
                    },
                    "locked": {
                        "type": "string",
                        "format": "binary",
                        "example": "false",
                        "description": "If true, this column is locked. The user can do nothing to the column."
                    },
                    "selectable": {
                        "type": "boolean",
                        "example": "false",
                        "description": "If true, in the UI, the column should give the user the option to select which value in the column to use for the final record. Usuanlly this selectcion is in the form of radio buttons."
                    },
                    "is_primary": {
                        "type": "string",
                        "format": "binary",
                        "example": "false",
                        "description": "If true, this column represents a primary (master) column.\n\nWhen a column.is_primary is true, then the following are happen:\n\n1. UI logic adapts to draw the primary column accordingly.\n\n2. cells column is used to specify which record is the primary (initially selected in the UI).\n\n3. On return, column_changes.value is \"\" (empty string) when the user has changed the primary record."
                    },
                    "combine": {
                        "type": "boolean",
                        "example": "true",
                        "description": "If true, in the UI, the column should show an information icon with tooltip notifying that the column values have been combined"
                    },
                    "group_selection": {
                        "type": "boolean",
                        "example": "true",
                        "description": "When true the column supports one selected value for each row group."
                    }
                },
                "required": [
                    "id",
                    "name",
                    "label",
                    "conflicted",
                    "locked",
                    "selectable"
                ]
            },
            "ColumnChange": {
                "title": "ColumnChange",
                "type": "object",
                "x-examples": {
                    "Example ColumnChange": {
                        "column_id": "270b5a68-81a6-4772-8831-73ba1e6ceb5d",
                        "selected_row_id": "46d6da28-4af3-4a31-9a74-63ea18db47fc",
                        "value": "1st Alarm"
                    }
                },
                "properties": {
                    "column_id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "270b5a68-81a6-4772-8831-73ba1e6ceb5d",
                        "description": "In the dupe set, the id of the column that has the change."
                    },
                    "selected_row_id": {
                        "type": "string",
                        "example": "46d6da28-4af3-4a31-9a74-63ea18db47fc",
                        "format": "uuid",
                        "description": "In the dupe set, the id of the row that has been selected."
                    },
                    "value": {
                        "type": "string",
                        "example": "1st Alarm",
                        "description": "The value of this column's final (result) cell."
                    }
                },
                "required": [
                    "column_id",
                    "selected_row_id",
                    "value"
                ],
                "description": "Represents a change that has been applied to the data, usually within the DupeGrid Vuetify component, by the end user. For example, if a user selects a radio button on a conflict column for city, changing the city from NYC to New York. Or if a user manually edits the FirstName of in a DupeGrid result (final) record."
            },
            "DupeRow": {
                "title": "DupeRow",
                "type": "object",
                "x-examples": {
                    "DupeRow Example": {
                        "id": "36d6da28-4af3-4a31-9a74-63ea18db47fc",
                        "locked": false,
                        "never_merge_disabled": true,
                        "data": {
                            "source": "Account",
                            "name": "First Alarm",
                            "street": "2335 N. Michigan Avenue",
                            "lead_source": "",
                            "state": "New York",
                            "phone": "(785)241-6202"
                        }
                    }
                },
                "description": "Represents one row in a dupe grid",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "36d6da28-4af3-4a31-9a74-63ea18db47fc",
                        "format": "uuid",
                        "description": "The UUID of this dupe row."
                    },
                    "locked": {
                        "type": "boolean",
                        "description": "Defines if this row in the dupe grid is locked (can not be changed in any way)."
                    },
                    "data": {
                        "type": "object",
                        "description": "The data for this row. For exmaple\n{\n    \"source\": \"Account\",\n    \"name\": \"First Alarm\",\n    \"street\": \"2335 N. Michigan Avenue\",\n    \"lead_source\": \"\",\n    \"state\": \"New York\",\n    \"phone\": \"(785)241-6202\"\n}"
                    },
                    "never_merge_disabled": {
                        "type": "boolean",
                        "description": "Defines if the Never Merged option on a row is available in the UI. Defaults to false if the attribute is missing (it is not required).",
                        "example": "true"
                    },
                    "group": {
                        "type": "string",
                        "description": "Name of the group this row belongs to",
                        "example": "Account"
                    }
                },
                "required": [
                    "id",
                    "locked",
                    "data"
                ]
            },
            "DupeCell": {
                "title": "DupeCell",
                "type": "object",
                "x-examples": {
                    "example-1": {
                        "column_id": "470b5a68-81a6-4772-8831-73ba1e6ceb5d",
                        "row_id": "36d6da28-4af3-4a31-9a74-63ea18db47fc",
                        "locked": false,
                        "selected": true,
                        "record_link": "https://qaap1-dev-ed.lightning.force.com/lightning/r/Account/0013t00001XzLEOAA3/view"
                    }
                },
                "properties": {
                    "row_id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "36d6da28-4af3-4a31-9a74-63ea18db47fc",
                        "description": "The UUID of the row this cell is associated with."
                    },
                    "column_id": {
                        "type": "string",
                        "example": "470b5a68-81a6-4772-8831-73ba1e6ceb5d",
                        "format": "uuid",
                        "description": "The UUID of the column this cell is associated with."
                    },
                    "locked": {
                        "type": "boolean",
                        "example": "false",
                        "description": "If true, this cell is locked."
                    },
                    "selected": {
                        "type": "boolean",
                        "example": "true",
                        "description": "If true, this cell is the selected cell (value) in this column. For example, if a column is selectable, because there are conflicting values in the column, then selected specifies that this specific cell (row in the column) is the one that is currently selected.\n\nIn the UI, this usually is radio buttons on the column, and selected being true signals that this cell is the one that is selected for this column."
                    },
                    "record_link": {
                        "type": "string",
                        "format": "uri",
                        "example": "https://qaap1-dev-ed.lightning.force.com/lightning/r/Account/0013t00001XzLEOAA3/view",
                        "description": "The URL of the record in the CRM system."
                    }
                },
                "required": [
                    "row_id",
                    "column_id"
                ]
            },
            "SearchColumn": {
                "title": "SearchColumn",
                "type": "object",
                "x-examples": {
                    "Street column": {
                        "id": "370b5a68-81a6-4772-8831-73ba1e6ceb5d",
                        "name": "street",
                        "label": "Billing Street 1"
                    }
                },
                "description": "",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "370b5a68-81a6-4772-8831-73ba1e6ceb5d",
                        "description": "The UUID of this dupe column."
                    },
                    "name": {
                        "type": "string",
                        "example": "street",
                        "description": "The unique name of this column."
                    },
                    "label": {
                        "type": "string",
                        "example": "Billing Street 1",
                        "description": "The label (what is shown in the UI) of this column."
                    }
                },
                "required": [
                    "id",
                    "name",
                    "label"
                ]
            },
            "MergedDupeSet": {
                "title": "MergedDupeSet",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "submitter": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object"
                    },
                    "mergeDate": {
                        "type": "string",
                        "description": "ISO 8601 Date time string"
                    }
                }
            },
            "UserConfiguration": {
                "title": "UserConfiguration",
                "type": "object",
                "properties": {
                    "referFriends": {
                        "type": "boolean",
                        "description": "When true, allow the user to refer a friend if they rate five stars."
                    },
                    "columnSizes": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "column_id": {
                                    "type": "string",
                                    "description": ""
                                },
                                "width": {
                                    "type": "integer"
                                },
                                "sorting": {
                                    "type": "string",
                                    "enum": [
                                        "asc",
                                        "desc",
                                        "none"
                                    ]
                                }
                            }
                        }
                    }
                },
                "x-examples": {
                    "example-1": {}
                }
            },
            "DupeSetInfo": {
                "title": "DupeSetInfo",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "created": {
                        "type": "string"
                    },
                    "estimated_seconds_to_complete": {
                        "type": "string"
                    },
                    "owner_id": {
                        "type": "string"
                    },
                    "assignee_names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Names of users assigned to this dupe set, note depending on request may not include all possible users"
                    },
                    "bonus_points_countdown_seconds": {
                        "type": "string"
                    },
                    "final_record": {
                        "type": "object",
                        "description": "The final record is a dictionary with keys being the name of the column and values being the value for this field of the record. For example {\"first\":\"joe\",\"last\":\"Smith\"}.",
                        "example": "{         \"source\": \"Account\",         \"name\": \"First Alarm\",         \"street\": \"2335 Michigan Avenue\",         \"lead_source\": \"\",         \"state\": \"New York\",         \"phone\": \"(785)241-6201\"     }"
                    }
                },
                "description": "Basic info for to show a dupe set in a list"
            },
            "Registration": {
                "title": "Registration",
                "type": "object",
                "x-examples": {
                    "Registration": {
                        "id": "0deaa4cb-afcf-4a00-8570-b246f706c04d",
                        "object": "registration",
                        "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                        "created": "2018-11-13T20:20:39+00:00",
                        "modifed": "2018-11-13T20:20:39+00:00",
                        "email": "dev@activeprime.com",
                        "from_url": "https://activeprime.dev",
                        "from_ip": "127.0.0.1",
                        "start_datetime": "2020-11-13T20:20:39+00:00",
                        "end_datetime": "2020-11-20T20:20:39+00:00",
                        "is_used": false,
                        "account_id": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5"
                    }
                },
                "description": "Registration model",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "0deaa4cb-afcf-4a00-8570-b246f706c04d"
                    },
                    "object": {
                        "type": "string",
                        "enum": [
                            "registration"
                        ],
                        "example": "registration",
                        "pattern": "registration"
                    },
                    "modified": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-11-13T20:20:39+00:00"
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-11-13T20:20:39+00:00"
                    },
                    "owner_id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "090e24d3-34c6-49cb-846b-57af9cbff1fe"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "example": "dev@activeprime.com"
                    },
                    "from_url": {
                        "type": "string",
                        "format": "uri",
                        "example": "https://johnsonsoaps.com"
                    },
                    "from_ip": {
                        "type": "string",
                        "example": "127.0.0.1"
                    },
                    "start_datetime": {
                        "type": "string",
                        "example": "2020-11-13T20:20:39+00:00"
                    },
                    "end_datetime": {
                        "type": "string",
                        "example": "2020-11-20T20:20:39+00:00"
                    },
                    "is_used": {
                        "type": "boolean",
                        "example": "false"
                    },
                    "account_id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5"
                    }
                },
                "required": [
                    "id",
                    "object",
                    "modified",
                    "created",
                    "owner_id",
                    "email",
                    "from_url",
                    "from_ip",
                    "start_datetime",
                    "end_datetime",
                    "is_used",
                    "account_id"
                ]
            },
            "Connection": {
                "title": "Connection",
                "type": "object",
                "x-examples": {
                    "Connection": {
                        "id": "9b40c303-4fce-4482-89a3-6df6a1eea6df",
                        "object": "connection",
                        "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                        "created": "2018-11-13T20:20:39+00:00",
                        "modifed": "2018-11-13T20:20:39+00:00",
                        "account_id": "d463677e-2060-4db0-8985-35585a8bc90c",
                        "description": "The production instance of Salesforce",
                        "name": "SF Production",
                        "system_type": "sfdc",
                        "auth_type": "oauth2",
                        "auth_params": "{'flows' :['see openapi3 oauth2 docs for flows']}"
                    }
                },
                "description": "A Connection defines how CleanData will connect to a customer's data system. For instance, an OAuth2 connection to Salesforce.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "9b40c303-4fce-4482-89a3-6df6a1eea6df"
                    },
                    "object": {
                        "type": "string",
                        "example": "connection",
                        "pattern": "connection"
                    },
                    "modified": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-11-13T20:20:39+00:00"
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-11-13T20:20:39+00:00"
                    },
                    "owner_id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                        "description": "The ID of the Owner of this record."
                    },
                    "name": {
                        "type": "string",
                        "example": "SF Production"
                    },
                    "description": {
                        "type": "string",
                        "example": "The production instance of Salesforce"
                    },
                    "auth_type": {
                        "type": "string",
                        "enum": [
                            "jwt_bearer",
                            "basic_auth",
                            "oauth2"
                        ],
                        "example": "jwt_bearer"
                    },
                    "auth_params": {
                        "type": "string",
                        "example": "{ \"token\": \"xxxx.yyyy.zzzz\" }"
                    },
                    "system_type": {
                        "type": "string",
                        "enum": [
                            "sfdc",
                            "msdrest"
                        ],
                        "example": "sfdc"
                    },
                    "account_id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "d463677e-2060-4db0-8985-35585a8bc90c"
                    }
                },
                "required": [
                    "id",
                    "object",
                    "modified",
                    "created",
                    "owner_id",
                    "name",
                    "description",
                    "auth_type",
                    "auth_params",
                    "system_type",
                    "account_id"
                ]
            },
            "Crawler": {
                "title": "Crawler",
                "type": "object",
                "x-examples": {
                    "Crawler": {
                        "id": "9eea810f-1fb5-4837-81b8-85425b80d133",
                        "object": "crawler",
                        "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                        "created": "2018-11-13T20:20:39+00:00",
                        "modifed": "2018-11-13T20:20:39+00:00",
                        "account_id": "d463677e-2060-4db0-8985-35585a8bc90c",
                        "connection_id": "9b40c303-4fce-4482-89a3-6df6a1eea6df",
                        "name": "Accounts and Leads",
                        "run_state": "stopped",
                        "crawl_state": "waiting",
                        "purger_enabled": true,
                        "state_history": [
                            {
                                "run_state": "started",
                                "crawl_state": "crawling"
                            }
                        ],
                        "loader_period": 300,
                        "entity_data": [
                            {
                                "entity": {
                                    "name": "account",
                                    "datetime_format": "YYYY-MM-DDTHH:mm:ssZ",
                                    "estimator_field": "name",
                                    "key_field": "id",
                                    "label": "Companies",
                                    "modified_field": "modified",
                                    "type": "Account",
                                    "fields": [
                                        {
                                            "label": "ID",
                                            "name": "id",
                                            "type": "ID"
                                        },
                                        {
                                            "label": "ID",
                                            "name": "id",
                                            "type": "ID"
                                        }
                                    ]
                                },
                                "crawl_data": {
                                    "last_scan_time": "2018-11-13T20:20:39+00:00",
                                    "slice_count": 30,
                                    "initial_load_slice": 10,
                                    "last_crawl_time": "2018-11-13T20:20:39+00:00",
                                    "last_record_time": "2018-11-13T20:20:39+00:00",
                                    "entity_changed": false,
                                    "index_fields": [
                                        "name",
                                        "phone"
                                    ],
                                    "fields": [
                                        "id",
                                        "name",
                                        "phone"
                                    ],
                                    "can_be_queried": false
                                }
                            }
                        ],
                        "connection": {
                            "id": "9b40c303-4fce-4482-89a3-6df6a1eea6df",
                            "object": "connection",
                            "created": "2018-11-13T20:20:39+00:00",
                            "modifed": "2018-11-13T20:20:39+00:00",
                            "description": "The production instance of Salesforce",
                            "name": "SF Production",
                            "system_type": "sfdc",
                            "auth_type": "oauth2",
                            "auth_params": "{'flows' :['see openapi3 oauth2 docs for flows']}"
                        }
                    }
                },
                "description": "A Crawler is connected to a data system via a Connection and crawls (reads) data from the data system.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "9eea810f-1fb5-4837-81b8-85425b80d133"
                    },
                    "object": {
                        "type": "string",
                        "enum": [
                            "account"
                        ],
                        "example": "account",
                        "pattern": "account"
                    },
                    "modified": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-11-13T20:20:39+00:00"
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-11-13T20:20:39+00:00"
                    },
                    "owner_id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                        "description": "The ID of the Owner of this record."
                    },
                    "account_id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "d463677e-2060-4db0-8985-35585a8bc90c"
                    },
                    "connection_id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "9b40c303-4fce-4482-89a3-6df6a1eea6df"
                    },
                    "run_state": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "Current run state. If crawler hasn't been created yet, then is null",
                        "enum": [
                            "started",
                            "stopped",
                            "paused",
                            "created"
                        ],
                        "example": "started"
                    },
                    "crawl_state": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "Current crawl state. If crawler hasn't been created yet, then is null",
                        "enum": [
                            "crawling",
                            "waiting"
                        ],
                        "example": "crawling"
                    },
                    "state_history": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "description": "A list of the run_state and crawl_states. Each entry in the list is a dictionary containing run_state and crawl_state.",
                            "properties": {
                                "run_state": {
                                    "type": "string",
                                    "enum": [
                                        "started",
                                        "stopped",
                                        "paused"
                                    ],
                                    "example": "started"
                                },
                                "crawl_state": {
                                    "type": "string",
                                    "enum": [
                                        "crawling",
                                        "waiting"
                                    ],
                                    "example": "waiting"
                                }
                            }
                        }
                    },
                    "purger_enabled": {
                        "type": "string",
                        "format": "binary",
                        "example": "true",
                        "description": "Is a purger enabled for this crawler."
                    },
                    "loader_period": {
                        "type": "integer",
                        "description": "The period (time in seconds) between loader runs.",
                        "example": "300"
                    },
                    "name": {
                        "type": "string",
                        "example": "Accounts and Leads"
                    },
                    "entity_data": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "connection": {
                        "type": "object",
                        "properties": {
                            "system_type": {
                                "type": "string",
                                "enum": [
                                    "sfdc"
                                ],
                                "example": "sfdc",
                                "description": "The CRM system type, like sfdc, msdrest."
                            },
                            "auth_type": {
                                "type": "string",
                                "enum": [
                                    "jwt_bearer",
                                    "oauth2"
                                ],
                                "example": "jwt_bearer"
                            },
                            "auto_params": {
                                "type": "string",
                                "example": "{ \"token\": \"xxxx.yyyy.zzzz\" }"
                            }
                        },
                        "required": [
                            "system_type",
                            "auth_type",
                            "auto_params"
                        ]
                    }
                },
                "required": [
                    "id",
                    "object",
                    "modified",
                    "created",
                    "run_state",
                    "crawl_state",
                    "state_history",
                    "purger_enabled",
                    "loader_period",
                    "name",
                    "entity_data",
                    "account_id",
                    "owner_id",
                    "entity_data"
                ]
            },
            "Purger": {
                "title": "Purger",
                "type": "object",
                "description": "A purger scans over an LDS and removes any records that are no longer in the source data system. For example, if a Salesforce production instance is the source for an LDS, and a record in Salesforce has been deleted, the purger, which scans over all the LDS, identifieds the record is no longer in Salesforce and removes it from the LDS.",
                "x-examples": {
                    "Purger": {
                        "id": "d200879e-4937-4a2c-a4b5-ecefd0ac62c6",
                        "object": "purger",
                        "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                        "created": "2018-11-13T20:20:39+00:00",
                        "modifed": "2018-11-13T20:20:39+00:00",
                        "period": 300,
                        "scan_size": 10000,
                        "current_entity": "account",
                        "current_slice": 10,
                        "last_cycle_time": "2018-11-13T20:20:39",
                        "time_to_next_cycle": 3.2,
                        "failed_on_last_cycle": false,
                        "crawler_id": "9eea810f-1fb5-4837-81b8-85425b80d133"
                    }
                },
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "d200879e-4937-4a2c-a4b5-ecefd0ac62c6"
                    },
                    "owner_id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                        "description": "The ID of the Owner of this record."
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-11-13T20:20:39+00:00"
                    },
                    "modified": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-11-13T20:20:39+00:00"
                    },
                    "object": {
                        "type": "string",
                        "enum": [
                            "purger"
                        ],
                        "example": "purger",
                        "pattern": "purger"
                    },
                    "period": {
                        "type": "number",
                        "description": "The number of seconds between purger cycles.",
                        "example": "300"
                    },
                    "scan_size": {
                        "type": "integer",
                        "description": "The maximum numbrer of records to read from the LDS at one time.",
                        "example": "10000"
                    },
                    "current_entity": {
                        "type": "string",
                        "description": "The current entity being purged.",
                        "example": "account"
                    },
                    "current_slice": {
                        "type": "string",
                        "description": "The curren slice being purged.",
                        "example": "10"
                    },
                    "last_cycle_time": {
                        "type": "string",
                        "description": "The last time that a purger cycle ran.",
                        "example": "2018-11-13T20:20:39+00:00"
                    },
                    "time_to_next_cycle": {
                        "type": "number",
                        "format": "float",
                        "example": "3.2",
                        "description": "Seconds until the next purger cycle runs."
                    },
                    "failed_on_last_cycle": {
                        "type": "boolean",
                        "example": "false",
                        "description": "Did the last purger cycle fail for some reason."
                    },
                    "crawler_id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "9eea810f-1fb5-4837-81b8-85425b80d133",
                        "description": "The crawler this purger is associated with."
                    }
                },
                "required": [
                    "id",
                    "owner_id",
                    "created",
                    "modified",
                    "object",
                    "period",
                    "scan_size",
                    "current_entity",
                    "current_slice",
                    "last_cycle_time",
                    "time_to_next_cycle",
                    "failed_on_last_cycle",
                    "crawler_id"
                ]
            },
            "Estimator": {
                "title": "Estimator",
                "type": "object",
                "description": "Estimator introspects the connection (data source) entity to determine the distribution of records over time, which is then used for crawling over all the records. The starts_with type estimator is the most common type and introspects by using starts_with logic on a field on the entity. The bypass type estimator can be used to brute force read all records at once; this bypasses estimation.",
                "x-examples": {
                    "Estimator": {
                        "id": "b9d93e94-77b5-4333-9136-1944b516c47f",
                        "object": "estimator",
                        "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                        "created": "2018-11-13T20:20:39+00:00",
                        "modifed": "2018-11-13T20:20:39+00:00",
                        "crawler_id": "9eea810f-1fb5-4837-81b8-85425b80d133",
                        "type": "starts_with",
                        "entity": "account",
                        "estimate_field": "company",
                        "distribution": [
                            0,
                            100,
                            300000
                        ],
                        "estimation_queries": [
                            "abc",
                            "xyz"
                        ],
                        "max_queries": 100
                    }
                },
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "b9d93e94-77b5-4333-9136-1944b516c47f"
                    },
                    "owner_id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                        "description": "The ID of the Owner of this record."
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-11-13T20:20:39+00:00"
                    },
                    "modified": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-11-13T20:20:39+00:00"
                    },
                    "object": {
                        "type": "string",
                        "enum": [
                            "estimator"
                        ],
                        "example": "estimator",
                        "pattern": "estimator"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "starts_with",
                            "bypass"
                        ],
                        "example": "starts_with",
                        "description": "Defines which type of estimator to use; bypass or starts_with."
                    },
                    "entity": {
                        "type": "string",
                        "description": "The name of the entity to estimate."
                    },
                    "estimate_field": {
                        "type": "string",
                        "description": "The field on the entity to use for estimating, when using the starts_with estimator. Each entity can have a different estimate_field."
                    },
                    "distribution": {
                        "type": "array",
                        "description": "The list of time slices. Time is epoch (float).",
                        "example": "[0.0, 4444.556]",
                        "items": {
                            "type": "number"
                        }
                    },
                    "estimation_queries": {
                        "type": "array",
                        "description": "The list of estimation (starts with) queries to perform.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "max_queries": {
                        "type": "integer",
                        "description": "The max number of starts with queries to perform. Default is 100.\n",
                        "example": "100"
                    },
                    "crawler_id": {
                        "type": "string",
                        "description": "The crawler this estimator is associatd with.",
                        "format": "uuid",
                        "example": "9eea810f-1fb5-4837-81b8-85425b80d133"
                    }
                },
                "required": [
                    "id",
                    "owner_id",
                    "created",
                    "modified",
                    "object",
                    "type",
                    "entity",
                    "estimate_field",
                    "distribution",
                    "estimation_queries",
                    "max_queries",
                    "crawler_id"
                ]
            },
            "LDS": {
                "title": "LDS",
                "type": "object",
                "x-examples": {
                    "LDS": {
                        "id": "6f0cc9c0-3bd3-4bcc-aee2-e8ebb015f6a3",
                        "object": "lds",
                        "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                        "created": "2018-11-13T20:20:39+00:00",
                        "modifed": "2018-11-13T20:20:39+00:00",
                        "crawler_id": "9eea810f-1fb5-4837-81b8-85425b80d133",
                        "index_can_be_queried": true,
                        "last_scan_entity": "account",
                        "entities": [
                            {
                                "name": "lead",
                                "key": "id",
                                "fields": [
                                    "id",
                                    "first",
                                    "last"
                                ],
                                "index_fields": [
                                    "id",
                                    "first",
                                    "last"
                                ],
                                "changed": false,
                                "can_be_queried": true,
                                "last_scan_time": 300000,
                                "last_crawl_time": 300000,
                                "last_record_time": 300000,
                                "current_slice": 291,
                                "total_slices": 300
                            }
                        ]
                    }
                },
                "description": "The LDS (local data store) that the crawler populates with data from the data source.",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "6f0cc9c0-3bd3-4bcc-aee2-e8ebb015f6a3"
                    },
                    "crawler_id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "9eea810f-1fb5-4837-81b8-85425b80d133",
                        "description": "The crawler this purger is associated with."
                    },
                    "object": {
                        "type": "string",
                        "enum": [
                            "lds"
                        ],
                        "example": "ads",
                        "pattern": "ads"
                    },
                    "modified": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-11-13T20:20:39+00:00"
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-11-13T20:20:39+00:00"
                    },
                    "owner_id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                        "description": "The ID of the Owner of this record."
                    },
                    "entities": {
                        "type": "array",
                        "example": "[{'name': 'lead','key':'id','fields':['id','first','last']}]",
                        "description": "The schema of the entities stored in the LDS.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "example": "lead",
                                    "description": "The entity name."
                                },
                                "key": {
                                    "type": "string",
                                    "example": "id",
                                    "description": "The entity (unique) key."
                                },
                                "fields": {
                                    "type": "array",
                                    "example": "['id','first','last']",
                                    "description": "The list of fields stored on this entity in the LDS.",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "index_fields": {
                                    "type": "array",
                                    "example": "['first','last']",
                                    "description": "Fields that are indexed.",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "changed": {
                                    "type": "boolean",
                                    "example": "false",
                                    "description": "Has the entity schema been changed."
                                },
                                "can_be_queried": {
                                    "type": "boolean",
                                    "example": "true",
                                    "description": "Can this entity be queried."
                                },
                                "last_scan_time": {
                                    "type": "number",
                                    "example": "300000 ",
                                    "description": "Epoch of last scan time"
                                },
                                "last_record_time": {
                                    "type": "number",
                                    "example": "3434343",
                                    "description": "Epoch of the last record added."
                                },
                                "last_crawl_time": {
                                    "type": "number",
                                    "example": "343434",
                                    "description": "Epoch of the last crawl time."
                                },
                                "current_slice": {
                                    "type": "integer",
                                    "example": "44",
                                    "description": "The current slice being prodessed"
                                },
                                "total_slices": {
                                    "type": "number",
                                    "example": "4949",
                                    "description": "Total number of slices."
                                }
                            },
                            "required": [
                                "name",
                                "key",
                                "fields",
                                "index_fields",
                                "changed",
                                "can_be_queried",
                                "last_scan_time",
                                "last_record_time",
                                "last_crawl_time",
                                "current_slice",
                                "total_slices"
                            ]
                        }
                    },
                    "index_can_be_queried": {
                        "type": "boolean",
                        "example": "false"
                    },
                    "last_scan_entity": {
                        "type": "string",
                        "example": "account"
                    }
                },
                "required": [
                    "id",
                    "crawler_id",
                    "object",
                    "modified",
                    "created",
                    "owner_id",
                    "entities",
                    "index_can_be_queried",
                    "last_scan_entity"
                ]
            },
            "CrawlerCreate": {
                "title": "CrawlerCreate",
                "type": "object",
                "description": "Crawler create or update request.",
                "x-examples": {
                    "UpdateCrawler": {
                        "connection_id": "9b40c303-4fce-4482-89a3-6df6a1eea6df",
                        "loader_period": 20
                    }
                },
                "properties": {
                    "connection_id": {
                        "type": "string",
                        "description": "The id of the Connection to bind to.",
                        "example": "9b40c303-4fce-4482-89a3-6df6a1eea6df"
                    },
                    "loader_period": {
                        "type": "integer",
                        "description": "The period (time in seconds) between loader runs.",
                        "example": "20"
                    }
                },
                "required": [
                    "connection_id"
                ]
            },
            "EstimatorCreate": {
                "title": "EstimatorCreate",
                "type": "object",
                "description": "Estimator create or update request.",
                "x-examples": {
                    "UpdateEstimate": {
                        "crawler_id": "9eea810f-1fb5-4837-81b8-85425b80d133",
                        "estimate_field": "first_name"
                    }
                },
                "properties": {
                    "estimate_field": {
                        "type": "string",
                        "description": "The field on this entity to use for estimation.",
                        "example": "first_name"
                    },
                    "crawler_id": {
                        "type": "string",
                        "description": "The id of the crawler to associate this estimator with.",
                        "format": "uuid",
                        "example": "9eea810f-1fb5-4837-81b8-85425b80d133"
                    }
                },
                "required": [
                    "crawler_id"
                ]
            },
            "LDSCreate": {
                "title": "LDSEntitiesUpdate",
                "type": "object",
                "description": "LDS entities updating",
                "x-examples": {
                    "UpdateLDSEntities": {
                        "name": "account",
                        "key": "account_id",
                        "fields": [
                            "company",
                            "phone"
                        ],
                        "index_fields": [
                            "company"
                        ]
                    }
                },
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "account",
                        "description": "The name of the entity."
                    },
                    "key": {
                        "type": "string",
                        "example": "account_id",
                        "description": "The (unique) key of the entity."
                    },
                    "fields": {
                        "type": "string",
                        "example": "['company','phone']",
                        "description": "List of fields to laod."
                    },
                    "index_fields": {
                        "type": "string",
                        "example": "['company']",
                        "description": "List of fields to index."
                    }
                },
                "required": [
                    "name",
                    "key",
                    "fields",
                    "index_fields"
                ]
            },
            "ConnectionCreate": {
                "title": "ConnectionCreate",
                "type": "object",
                "x-examples": {
                    "Create Connection": {
                        "description": "The production instance of Salesforce",
                        "name": "SF Production",
                        "system_type": "sfdc",
                        "auth_type": "oauth2",
                        "auth_params": "{'flows' :['see openapi3 oauth2 docs for flows']}"
                    }
                },
                "properties": {
                    "description": {
                        "type": "string",
                        "example": "The production instance of Salesforce",
                        "description": "A description of the Connection"
                    },
                    "name": {
                        "type": "string",
                        "example": "SF Production",
                        "description": "The connection name"
                    },
                    "system_type": {
                        "type": "string",
                        "enum": [
                            "sfdc"
                        ],
                        "example": "sfdc",
                        "pattern": "sfdc",
                        "description": "The system type, for example, sfdc."
                    },
                    "auth_type": {
                        "type": "string",
                        "enum": [
                            "basic_auth",
                            "jwt_bearer",
                            "oauth2"
                        ],
                        "example": "jwt_bearer",
                        "description": "The authentication type, for example, jwt_bearer."
                    },
                    "auth_params": {
                        "type": "string",
                        "example": "{ \"token\": \"xxxx.yyyy.zzzz\" }",
                        "description": "The auth specific params."
                    }
                },
                "required": [
                    "name",
                    "system_type",
                    "auth_type",
                    "auth_params"
                ]
            },
            "WriteGroup": {
                "title": "WriteGroup",
                "type": "object",
                "x-examples": {
                    "Example group of write commands": {
                        "id": "347330b6-5593-48f4-8738-4461a087e567",
                        "object": "writegroup",
                        "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                        "created": "2018-11-13T20:20:39+00:00",
                        "modifed": "2018-11-13T20:20:39+00:00",
                        "account_id": "d463677e-2060-4db0-8985-35585a8bc90c",
                        "connection_id": "9b40c303-4fce-4482-89a3-6df6a1eea6df",
                        "write_commands": [
                            {
                                "command": "merge",
                                "entity": "Lead",
                                "ids": [
                                    "primary_id",
                                    "secondary_id_1",
                                    "secondary_id_2"
                                ]
                            }
                        ]
                    }
                },
                "description": "A group of write commands",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "347330b6-5593-48f4-8738-4461a087e567"
                    },
                    "object": {
                        "type": "string",
                        "pattern": "writegroup",
                        "example": "writegroup",
                        "enum": [
                            "writegroup"
                        ]
                    },
                    "modified": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-11-13T20:20:39+00:00",
                        "description": "Modified datetime"
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2018-11-13T20:20:39+00:00",
                        "description": "Created datetime"
                    },
                    "owner_id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                        "description": "The ID of the Owner of this record."
                    },
                    "account_id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "d463677e-2060-4db0-8985-35585a8bc90c",
                        "description": "The id of the account these write commands are associated with."
                    },
                    "connection_id": {
                        "type": "string",
                        "example": "9b40c303-4fce-4482-89a3-6df6a1eea6df",
                        "description": "The id of the connection associatd with these write commands."
                    },
                    "write_commands": {
                        "type": "array",
                        "description": "The list of write commands (JSON).",
                        "items": {}
                    }
                },
                "required": [
                    "id",
                    "object",
                    "modified",
                    "created",
                    "owner_id",
                    "account_id",
                    "connection_id",
                    "write_commands"
                ]
            },
            "ScoreSummary": {
                "description": "ScoreSummary model",
                "properties": {
                    "consistency": {
                        "description": "The consistency point sum",
                        "example": 15,
                        "type": "integer"
                    },
                    "created": {
                        "example": "2018-11-13T20:20:39+00:00",
                        "format": "date-time",
                        "type": "string"
                    },
                    "discovery": {
                        "description": "The discovery point sum",
                        "example": 15,
                        "type": "integer"
                    },
                    "effort": {
                        "description": "The effort point sum",
                        "example": 15,
                        "type": "integer"
                    },
                    "entity_type": {
                        "enum": [
                            "user",
                            "team"
                        ],
                        "example": "regular",
                        "type": "string"
                    },
                    "id": {
                        "example": "d463677e-2060-4db0-8985-35585a8bc90c",
                        "format": "uuid",
                        "type": "string"
                    },
                    "modified": {
                        "example": "2018-11-13T20:20:39+00:00",
                        "format": "date-time",
                        "type": "string"
                    },
                    "object": {
                        "enum": [
                            "scoresummary"
                        ],
                        "example": "scoresummary",
                        "pattern": "scoresummary",
                        "type": "string"
                    },
                    "owner_id": {
                        "description": "The ID of the Owner of this record.",
                        "example": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                        "format": "uuid",
                        "type": "string"
                    },
                    "regular": {
                        "description": "The regular point sum",
                        "example": 15,
                        "type": "integer"
                    },
                    "team_id": {
                        "description": "The ID of the Team that this ScoreSummary belongs to.",
                        "example": "123e24d3-34c6-49cb-846b-57af9cbfabaf",
                        "format": "uuid",
                        "type": "string"
                    },
                    "user_id": {
                        "description": "The ID of the User that this ScoreSummary belongs to.",
                        "example": "768e24d3-34c6-49cb-846b-57af9cbfd5673",
                        "format": "uuid",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "owner_id",
                    "created",
                    "modified",
                    "entity_type",
                    "regular",
                    "effort",
                    "consistency",
                    "discovery",
                    "object"
                ],
                "title": "ScoreSummary",
                "type": "object",
                "x-examples": {
                    "ScoreSummary": {
                        "consistency": 50,
                        "created": "2018-11-13T20:20:39+00:00",
                        "discovery": 25,
                        "effort": 30,
                        "entity_type": "user",
                        "id": "d463677e-2060-4db0-8985-35585a8bc90c",
                        "modifed": "2018-11-13T20:20:39+00:00",
                        "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                        "period": "202004",
                        "regular": 150,
                        "team_id": "123e24d3-34c6-49cb-846b-57af9cbfabaf",
                        "user_id": "768e24d3-34c6-49cb-846b-57af9cbfd5673"
                    }
                }
            },
            "GetScoreSummary": {
                "description": "Get ScoreSummary model",
                "properties": {
                    "object": {
                        "enum": [
                            "score"
                        ],
                        "example": "score",
                        "pattern": "score",
                        "type": "string"
                    },
                    "owner_id": {
                        "description": "The ID of the Owner of this record.",
                        "example": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                        "format": "uuid",
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "regular",
                            "effort",
                            "consistency",
                            "discovery"
                        ],
                        "example": "regular",
                        "type": "string"
                    },
                    "value": {
                        "example": 15,
                        "type": "integer"
                    }
                },
                "required": [
                    "owner_id",
                    "value",
                    "type"
                ],
                "title": "GetScoreSummary",
                "type": "object",
                "x-examples": {
                    "Create ScoreSummary Example": {
                        "created": "2018-11-13T20:20:39+00:00",
                        "modifed": "2018-11-13T20:20:39+00:00",
                        "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                        "type": "regular",
                        "value": 15
                    }
                }
            },
            "CrawlerUpsert": {
                "title": "CrawlerUpsert",
                "type": "object",
                "description": "Crawler create or update request.",
                "x-examples": {
                    "CreateCrawler": {
                        "connection_id": "9b40c303-4fce-4482-89a3-6df6a1eea6df",
                        "loader_period": 20,
                        "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                        "account_id": "d463677e-2060-4db0-8985-35585a8bc90c",
                        "entity_schemas": [
                            {
                                "blocking_filter": null,
                                "entity": "Contact",
                                "fields": [
                                    "first",
                                    "last",
                                    "id"
                                ],
                                "index_fields": [
                                    "first",
                                    "last",
                                    "id"
                                ],
                                "key": "id",
                                "parent": null
                            }
                        ]
                    },
                    "UpdateCrawler": {
                        "loader_period": 30
                    }
                },
                "properties": {
                    "connection_id": {
                        "type": "string",
                        "description": "The id of the Connection to bind to.",
                        "example": "9b40c303-4fce-4482-89a3-6df6a1eea6df"
                    },
                    "loader_period": {
                        "type": "integer",
                        "description": "The period (time in seconds) between loader runs.",
                        "example": "20"
                    },
                    "account_id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The external account_id, which is needed upon creation but not upon update.",
                        "example": "d463677e-2060-4db0-8985-35585a8bc90c"
                    },
                    "owner_id": {
                        "type": "string",
                        "description": "The external owner_id, which is needed upon creation but not upon update.",
                        "example": "090e24d3-34c6-49cb-846b-57af9cbff1fe"
                    },
                    "entity_schemas": {
                        "type": "array",
                        "description": "An array of EntitySchema objects defining what entities the crawler will crawl. If entity_schemas is not provided, then the crawler can not be started until after the crawler has been provided at least one EntitySchema.",
                        "items": {
                            "$ref": "#/components/schemas/UpdateEntitySchema"
                        }
                    }
                },
                "required": [
                    "connection_id"
                ]
            },
            "EntitySchema": {
                "title": "EntitySchema",
                "type": "object",
                "properties": {
                    "entity": {
                        "type": "string",
                        "example": "Contact"
                    },
                    "fields": {
                        "type": "string",
                        "example": "[\"first\",\"last\",\"id\"]"
                    },
                    "index_fields": {
                        "type": "string",
                        "example": "[\"first\",\"last\"]"
                    },
                    "key": {
                        "type": "string",
                        "example": "\"id\""
                    },
                    "db_entity": {
                        "type": "string",
                        "example": "db_Account"
                    },
                    "db_fields": {
                        "type": "string",
                        "example": "[\"db_first\",\"db_last\",\"db_id\"]"
                    },
                    "block_filter": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "example": "null"
                    },
                    "parent": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "example": "null"
                    }
                },
                "required": [
                    "entity",
                    "fields",
                    "index_fields",
                    "key",
                    "db_entity",
                    "db_fields"
                ],
                "x-examples": {
                    "Example EntitySchema": {
                        "blocking_filter": null,
                        "db_entity": "ap_Contact",
                        "db_fields": [
                            "ap_first",
                            "ap_last",
                            "ap_id"
                        ],
                        "entity": "Contact",
                        "fields": [
                            "first",
                            "last",
                            "id"
                        ],
                        "index_fields": [
                            "first",
                            "last",
                            "id"
                        ],
                        "key": "id",
                        "parent": null
                    }
                }
            },
            "UpdateEntitySchema": {
                "title": "UpdateEntitySchema",
                "type": "object",
                "x-examples": {
                    "Example EntitySchema": {
                        "entity": "Contact",
                        "fields": [
                            "first",
                            "last",
                            "id",
                            "phone"
                        ],
                        "index_fields": [
                            "first",
                            "last",
                            "id",
                            "phone"
                        ],
                        "key": "id"
                    }
                },
                "properties": {
                    "entity": {
                        "type": "string",
                        "example": "Contact"
                    },
                    "fields": {
                        "type": "string",
                        "example": "[\"first\",\"last\",\"id\"]"
                    },
                    "index_fields": {
                        "type": "string",
                        "example": "[\"first\",\"last\"]"
                    },
                    "key": {
                        "type": "string",
                        "example": "\"id\""
                    },
                    "block_filter": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "example": "null"
                    },
                    "parent": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "example": "null"
                    }
                },
                "required": [
                    "entity",
                    "fields",
                    "index_fields",
                    "key"
                ]
            },
            "RuleUpsert": {
                "title": "RuleUpsert",
                "type": "object",
                "description": "Update or Insert Rule",
                "x-examples": {
                    "Create Rule": {
                        "name": "usa_accounts",
                        "description": "Accounts in the USA",
                        "type": "Filter",
                        "rule": "{}",
                        "entities": [
                            "account"
                        ]
                    }
                },
                "properties": {
                    "object": {
                        "type": "string",
                        "pattern": "rule",
                        "enum": [
                            "rule"
                        ],
                        "example": "rule"
                    },
                    "name": {
                        "type": "string",
                        "example": "Main dupe detection"
                    },
                    "description": {
                        "type": "string",
                        "example": "Find duplicates across Account and Lead records"
                    },
                    "rule": {
                        "type": "string",
                        "example": "{}"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "[\"account\"]"
                        }
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "PreCleanse",
                            "Filter",
                            "MatchCriteria",
                            "MatchConfidenceScore",
                            "Merge",
                            "Assignment",
                            "Presentation",
                            "Write"
                        ]
                    }
                },
                "required": [
                    "object"
                ]
            },
            "DupeSet": {
                "title": "Smelter DupeSet model",
                "type": "object",
                "x-examples": {
                    "DupeSet": {
                        "id": "ce698f45-4a53-4c4c-997d-115fea7924ac",
                        "entity": "Account",
                        "records": [
                            {
                                "first": "joe",
                                "last": "smith"
                            }
                        ],
                        "schema": {
                            "first": "str",
                            "last": "str"
                        },
                        "primary_id": 0,
                        "ownership_field": "owner",
                        "mcs_rating": "Low"
                    }
                },
                "description": "DupeSet model",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "ce698f45-4a53-4c4c-997d-115fea7924ac"
                    },
                    "entity": {
                        "type": "string",
                        "example": "Account"
                    },
                    "records": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "schema": {
                        "type": "object",
                        "properties": {
                            "": {
                                "type": "string"
                            }
                        }
                    },
                    "primatry_id": {
                        "type": "integer",
                        "example": 0
                    },
                    "ownership_field": {
                        "type": "string",
                        "example": "owner"
                    },
                    "mcs_rating": {
                        "type": "string",
                        "example": "Low",
                        "enum": [
                            "Low",
                            "Medium",
                            "High"
                        ]
                    }
                },
                "required": [
                    "id",
                    "entity",
                    "records",
                    "schema",
                    "primatry_id",
                    "ownership_field"
                ]
            }
        },
        "securitySchemes": {
            "JWT": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT",
                "description": "JWT Bearer is the initial authentication mechanism used by CleanData. JWT via OAuth2 will come in the near future and JWT Bearer will be depricated."
            }
        }
    },
    "info": {
        "title": "Smelter",
        "version": "0",
        "description": "Smelter API.",
        "contact": {
            "name": "Clint Bidlack"
        },
        "termsOfService": "https://apps.activeprime.com/cleandata/terms",
        "license": {
            "url": "https://apps.activeprime.com/cleandata/license",
            "name": "ActivePrime CleanData License"
        }
    },
    "openapi": "3.0.2",
    "security": [
        {
            "JWT": []
        }
    ],
    "paths": {
        "/api/v0/admin/users/{id}": {
            "get": {
                "summary": "Get User by ID",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                },
                                "examples": {
                                    "User": {
                                        "value": {
                                            "id": "d463677e-2060-4db0-8985-35585a8bc90c",
                                            "object": "user",
                                            "first": "Don",
                                            "last": "Johnson",
                                            "email": "don.johnson@activeprime.com",
                                            "status": "enabled",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "role_id": "2473c912-ea9c-4f89-8d85-32e39cb8275f",
                                            "account_id": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00",
                                            "last_login": "2018-11-13T20:20:39+00:00",
                                            "manager_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe"
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Retrieve a User.",
                "parameters": [],
                "operationId": "getUserById",
                "security": [
                    {
                        "JWT": []
                    }
                ]
            },
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "description": "uuid",
                    "required": true
                }
            ],
            "delete": {
                "summary": "Delete User",
                "responses": {
                    "200": {
                        "description": "Deletion was successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                },
                                "examples": {}
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Delete the User.",
                "operationId": "deleteUser"
            },
            "post": {
                "summary": "Update User",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                },
                                "examples": {
                                    "Updated User": {
                                        "value": {
                                            "id": "d463677e-2060-4db0-8985-35585a8bc90c",
                                            "object": "user",
                                            "name": "don.johnson",
                                            "first": "Don",
                                            "last": "Johnson",
                                            "email": "don.johnson@activeprime.com",
                                            "status": "enabled",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "role_id": "2473c912-ea9c-4f89-8d85-32e39cb8275f",
                                            "account_id": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00",
                                            "last_login": "2018-11-13T20:20:39+00:00"
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Update the User.",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateUser"
                            },
                            "examples": {
                                "Update User Example": {
                                    "value": {
                                        "object": "user",
                                        "first": "Don",
                                        "last": "Johnson",
                                        "email": "don.johnson@activeprime.com",
                                        "status": "enabled",
                                        "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                        "manager_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                        "role_id": "2473c912-ea9c-4f89-8d85-32e39cb8275f",
                                        "account_id": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5"
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [],
                "operationId": "updateUser"
            }
        },
        "/api/v0/admin/users/me": {
            "get": {
                "summary": "Get current User details",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                },
                                "examples": {
                                    "User": {
                                        "value": {
                                            "id": "d463677e-2060-4db0-8985-35585a8bc90c",
                                            "object": "user",
                                            "first": "Don",
                                            "last": "Johnson",
                                            "email": "don.johnson@activeprime.com",
                                            "status": "enabled",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "role_id": "2473c912-ea9c-4f89-8d85-32e39cb8275f",
                                            "account_id": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00",
                                            "last_login": "2018-11-13T20:20:39+00:00",
                                            "manager_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "role": {
                                                "object": "role",
                                                "id": "fb4f4856-1c83-463e-b545-eff609c4b781",
                                                "created": "2020-09-02T15:14:22.022889",
                                                "modified": "2020-09-02T15:14:22.022894",
                                                "owner_id": "023eecf8-0c91-422b-80f0-dbe391dd2347",
                                                "name": "Admin",
                                                "description": "",
                                                "account_id": "8d6fdab4-976c-441d-9f6a-7b1200412fa4",
                                                "permitted_actions": ["datasystem.lds.estimators.get", "auth.registrations.id.post", "datasystem.connections.id.verify.post", "admin.multimaps.id.get", "admin.accounts.get", "datasystem.crawlers.post", "datasystem.connections.id.get", "datasystem.connections.get", "admin.roles.post", "admin.roles.id.get", "admin.licenses.id.get", "admin.roles.get", "datasystem.crawlers.id.lds.get", "admin.users.id.direct_reports.get", "admin.users.id.delete", "auth.start_adding_user", "auth.finish_adding_user", "admin.licenses.id.delete", "admin.accounts.post", "admin.licenses.post", "datasystem.estimators.id.post", "admin.roles.id.delete", "datasystem.crawlers.id.signal.post", "auth.registrations.id.delete", "admin.users.id.get", "datasystem.connections.id.post", "datasystem.lds.id.get", "datasystem.crawlers.id.get", "datasystem.lds.id.post", "auth.registrations.post", "datasystem.connections.id.delete", "admin.users.get", "admin.licenses.id.post", "auth.registrations.id.get", "datasystem.crawlers.id.post", "datasystem.estimators.id.get", "datasystem.connections.id.entities.get", "admin.roles.id.post", "admin.users.post", "datasystem.connections.post", "admin.accounts.id.post", "admin.accounts.id.get", "admin.licenses.get", "datasystem.crawlers.get", "admin.users.id.post", "datasystem.crawlers.id.delete", "admin.accounts.id.delete"]
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Retrieve current User.",
                "parameters": [],
                "operationId": "getUser",
                "security": [
                    {
                        "JWT": []
                    }
                ]
            }
        },
        "/api/v0/admin/users/": {
            "get": {
                "summary": "Get Users",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "object": {
                                            "type": "string",
                                            "enum": [
                                                "list"
                                            ],
                                            "example": "list",
                                            "pattern": "list"
                                        },
                                        "item_type": {
                                            "type": "string",
                                            "description": "The type of objects stored in the list",
                                            "enum": [
                                                "user"
                                            ],
                                            "example": "user",
                                            "pattern": "user"
                                        },
                                        "has_more": {
                                            "type": "boolean",
                                            "example": "false"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/User"
                                            }
                                        }
                                    },
                                    "required": [
                                        "object",
                                        "item_type",
                                        "has_more",
                                        "data"
                                    ]
                                },
                                "examples": {
                                    "All Users": {
                                        "value": {
                                            "object": "list",
                                            "item_type": "user",
                                            "has_more": false,
                                            "data": [
                                                {
                                                    "id": "d463677e-2060-4db0-8985-35585a8bc90c",
                                                    "object": "user",
                                                    "first": "Don",
                                                    "last": "Johnson",
                                                    "email": "don.johnson@activeprime.com",
                                                    "status": "enabled",
                                                    "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                                    "role_id": "2473c912-ea9c-4f89-8d85-32e39cb8275f",
                                                    "manager_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                                    "account_id": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5",
                                                    "created": "2018-11-13T20:20:39+00:00",
                                                    "modifed": "2018-11-13T20:20:39+00:00",
                                                    "last_login": "2018-11-13T20:20:39+00:00"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "List all Users.",
                "parameters": [],
                "operationId": "getUsers"
            },
            "post": {
                "summary": "Create User",
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                },
                                "examples": {
                                    "Created": {
                                        "value": {
                                            "id": "d463677e-2060-4db0-8985-35585a8bc90c",
                                            "object": "user",
                                            "first": "Don",
                                            "last": "Johnson",
                                            "email": "don.johnson@activeprime.com",
                                            "status": "enabled",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "manager_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "role_id": "2473c912-ea9c-4f89-8d85-32e39cb8275f",
                                            "account_id": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00",
                                            "last_login": "2018-11-13T20:20:39+00:00"
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Create a User.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateUser"
                            },
                            "examples": {
                                "Create a User": {
                                    "value": {
                                        "object": "user",
                                        "first": "Don",
                                        "last": "Johnson",
                                        "email": "don.johnson@activeprime.com",
                                        "status": "enabled",
                                        "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                        "role_id": "2473c912-ea9c-4f89-8d85-32e39cb8275f",
                                        "account_id": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5"
                                    }
                                }
                            }
                        }
                    },
                    "description": ""
                },
                "operationId": "createUser"
            },
            "parameters": []
        },
        "/api/v0/admin/roles/{id}": {
            "get": {
                "summary": "Get Role by ID",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Role"
                                },
                                "examples": {
                                    "Role": {
                                        "value": {
                                            "id": "d463677e-2060-4db0-8985-35585a8bc90c",
                                            "object": "role",
                                            "name": "Data Steward",
                                            "description": "The standard Data Steward role",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00"
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Retrieve a Role.",
                "parameters": [],
                "operationId": "getRoleById"
            },
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "description": "uuid",
                    "required": true
                }
            ],
            "delete": {
                "summary": "Delete Role",
                "responses": {
                    "200": {
                        "description": "Deletion was successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                },
                                "examples": {}
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Delete the Role.",
                "operationId": "deleteRole"
            },
            "post": {
                "summary": "Update Role",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Role"
                                },
                                "examples": {
                                    "Updated Role": {
                                        "value": {
                                            "id": "d463677e-2060-4db0-8985-35585a8bc90c",
                                            "object": "role",
                                            "name": "Data Steward",
                                            "description": "The standard Data Steward role",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00"
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Update the Role.",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Role"
                            },
                            "examples": {
                                "Update Role Example": {
                                    "value": {
                                        "id": "d463677e-2060-4db0-8985-35585a8bc90c",
                                        "object": "role",
                                        "name": "Data Steward"
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [],
                "operationId": "updateRole"
            }
        },
        "/api/v0/admin/roles/": {
            "get": {
                "summary": "Get Roles",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "object": {
                                            "type": "string",
                                            "enum": [
                                                "list"
                                            ],
                                            "example": "list",
                                            "pattern": "list"
                                        },
                                        "item_type": {
                                            "type": "string",
                                            "description": "The type of objects stored in the list",
                                            "enum": [
                                                "role"
                                            ],
                                            "example": "role",
                                            "pattern": "role"
                                        },
                                        "has_more": {
                                            "type": "boolean",
                                            "example": "false"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Role"
                                            }
                                        }
                                    },
                                    "required": [
                                        "object",
                                        "item_type",
                                        "has_more",
                                        "data"
                                    ]
                                },
                                "examples": {
                                    "All Roles": {
                                        "value": {
                                            "object": "list",
                                            "item_type": "role",
                                            "has_more": false,
                                            "data": [
                                                {
                                                    "id": "d463677e-2060-4db0-8985-35585a8bc90c",
                                                    "object": "role",
                                                    "name": "Data Steward",
                                                    "description": "The standard Data Steward role",
                                                    "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                                    "created": "2018-11-13T20:20:39+00:00",
                                                    "modifed": "2018-11-13T20:20:39+00:00"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "List all Roles.",
                "parameters": [],
                "operationId": "getRoles"
            },
            "post": {
                "summary": "Create Role",
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Role"
                                },
                                "examples": {
                                    "Created Role": {
                                        "value": {
                                            "id": "d463677e-2060-4db0-8985-35585a8bc90c",
                                            "object": "role",
                                            "name": "Data Steward",
                                            "description": "The standard Data Steward role",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00"
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Create a Role.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Role"
                            },
                            "examples": {
                                "Create a Role": {
                                    "value": {
                                        "id": "d463677e-2060-4db0-8985-35585a8bc90c",
                                        "object": "role",
                                        "name": "Data Steward",
                                        "description": "The standard Data Steward role",
                                        "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                        "created": "2018-11-13T20:20:39+00:00",
                                        "modifed": "2018-11-13T20:20:39+00:00"
                                    }
                                }
                            }
                        }
                    },
                    "description": ""
                },
                "operationId": "createRole"
            },
            "parameters": []
        },
        "/api/v0/admin/accounts/": {
            "get": {
                "summary": "Get Accounts",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "object": {
                                            "type": "string",
                                            "enum": [
                                                "list"
                                            ],
                                            "example": "list",
                                            "pattern": "list"
                                        },
                                        "item_type": {
                                            "type": "string",
                                            "description": "The type of objects stored in the list",
                                            "enum": [
                                                "account"
                                            ],
                                            "example": "account",
                                            "pattern": "account"
                                        },
                                        "has_more": {
                                            "type": "boolean",
                                            "example": "false"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Account"
                                            }
                                        }
                                    },
                                    "required": [
                                        "object",
                                        "item_type",
                                        "has_more",
                                        "data"
                                    ]
                                },
                                "examples": {
                                    "All Accounts": {
                                        "value": {
                                            "object": "list",
                                            "item_type": "account",
                                            "has_more": false,
                                            "data": [
                                                {
                                                    "id": "d463677e-2060-4db0-8985-35585a8bc90c",
                                                    "object": "account",
                                                    "name": "Johnson Soaps",
                                                    "url": "https://acmewidgets.com",
                                                    "email_domain": "acmewidgets.com",
                                                    "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                                    "created": "2018-11-13T20:20:39+00:00",
                                                    "modifed": "2018-11-13T20:20:39+00:00"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "List all Accounts.",
                "parameters": [],
                "operationId": "getAccounts"
            },
            "post": {
                "summary": "Create Account",
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Account"
                                },
                                "examples": {
                                    "Created Account": {
                                        "value": {
                                            "id": "d463677e-2060-4db0-8985-35585a8bc90c",
                                            "object": "account",
                                            "name": "Johnson Soaps",
                                            "url": "https://acmewidgets.com",
                                            "email_domain": "acmewidgets.com",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00"
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Create a Account.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Account"
                            },
                            "examples": {
                                "Create an Account": {
                                    "value": {
                                        "id": "d463677e-2060-4db0-8985-35585a8bc90c",
                                        "object": "account",
                                        "name": "Johnson Soaps",
                                        "url": "https://johnsonsoaps.com"
                                    }
                                }
                            }
                        }
                    },
                    "description": ""
                },
                "operationId": "createAccount"
            },
            "parameters": []
        },
        "/api/v0/admin/accounts/{id}": {
            "get": {
                "summary": "Get Account by ID",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Account"
                                },
                                "examples": {
                                    "Account": {
                                        "value": {
                                            "id": "d463677e-2060-4db0-8985-35585a8bc90c",
                                            "object": "account",
                                            "name": "Johnson Soaps",
                                            "url": "https://acmewidgets.com",
                                            "email_domain": "acmewidgets.com",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00"
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Retrieve an Account.",
                "parameters": [],
                "operationId": "getAccountById"
            },
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "description": "uuid",
                    "required": true
                }
            ],
            "delete": {
                "summary": "Delete Account",
                "responses": {
                    "200": {
                        "description": "Deletion was successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                },
                                "examples": {
                                    "example-1": {}
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Delete the Account.",
                "operationId": "deleteAccount"
            },
            "post": {
                "summary": "Update Account",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Account"
                                },
                                "examples": {
                                    "Updated Account": {
                                        "value": {
                                            "id": "d463677e-2060-4db0-8985-35585a8bc90c",
                                            "object": "account",
                                            "name": "Johnson Soaps",
                                            "url": "https://acmewidgets.com",
                                            "email_domain": "acmewidgets.com",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00"
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Update an Account.",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Account"
                            },
                            "examples": {
                                "Update Account": {
                                    "value": {
                                        "name": "Johnson Soaps",
                                        "url": "https://johnsonsoaps.com"
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [],
                "operationId": "updateAccount"
            }
        },
        "/api/v0/admin/licenses/{id}": {
            "get": {
                "summary": "Get License by ID",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/License"
                                },
                                "examples": {
                                    "License": {
                                        "value": {
                                            "id": "70f32caa-12a2-49f1-9095-dce9f188890c",
                                            "object": "license",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00",
                                            "start": "2018-11-13T20:20:39+00:00",
                                            "end": "2020-11-13T20:20:39+00:00",
                                            "account_id": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5",
                                            "apps": [
                                                "ccrm"
                                            ],
                                            "user_count": 10
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Retrieve a License.",
                "parameters": [],
                "operationId": "getLicenseById"
            },
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "description": "uuid",
                    "required": true
                }
            ],
            "delete": {
                "summary": "Delete License",
                "responses": {
                    "200": {
                        "description": "Deletion was successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                },
                                "examples": {}
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Delete the License.",
                "operationId": "deleteLicense"
            },
            "post": {
                "summary": "Update License",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/License"
                                },
                                "examples": {
                                    "Updated License": {
                                        "value": {
                                            "id": "70f32caa-12a2-49f1-9095-dce9f188890c",
                                            "object": "license",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00",
                                            "start": "2018-11-13T20:20:39+00:00",
                                            "end": "2020-11-13T20:20:39+00:00",
                                            "account_id": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5",
                                            "apps": [
                                                "ccrm"
                                            ],
                                            "user_count": 10
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Update the License.",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/License"
                            },
                            "examples": {
                                "Update License": {
                                    "value": {
                                        "id": "70f32caa-12a2-49f1-9095-dce9f188890c",
                                        "object": "license",
                                        "start": "2018-11-13T20:20:39+00:00",
                                        "end": "2020-11-13T20:20:39+00:00",
                                        "account_id": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5",
                                        "apps": [
                                            "ccrm"
                                        ],
                                        "user_count": 10
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [],
                "operationId": "updateLicense"
            }
        },
        "/api/v0/admin/licenses/": {
            "get": {
                "summary": "Get Licenses",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "object": {
                                            "type": "string",
                                            "enum": [
                                                "list"
                                            ],
                                            "example": "list",
                                            "pattern": "list"
                                        },
                                        "item_type": {
                                            "type": "string",
                                            "description": "The type of objects stored in the list",
                                            "enum": [
                                                "license"
                                            ],
                                            "example": "license",
                                            "pattern": "license"
                                        },
                                        "has_more": {
                                            "type": "boolean",
                                            "example": "false"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/License"
                                            }
                                        }
                                    },
                                    "required": [
                                        "object",
                                        "item_type",
                                        "has_more",
                                        "data"
                                    ]
                                },
                                "examples": {
                                    "All Licenses": {
                                        "value": {
                                            "object": "list",
                                            "item_type": "license",
                                            "has_more": false,
                                            "data": [
                                                {
                                                    "id": "70f32caa-12a2-49f1-9095-dce9f188890c",
                                                    "object": "license",
                                                    "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                                    "created": "2018-11-13T20:20:39+00:00",
                                                    "modifed": "2018-11-13T20:20:39+00:00",
                                                    "start": "2018-11-13T20:20:39+00:00",
                                                    "end": "2020-11-13T20:20:39+00:00",
                                                    "account_id": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5",
                                                    "apps": [
                                                        "ccrm"
                                                    ],
                                                    "user_count": 10
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "List all License.",
                "parameters": [],
                "operationId": "getLicenses"
            },
            "post": {
                "summary": "Create License",
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/License"
                                },
                                "examples": {
                                    "Created License": {
                                        "value": {
                                            "id": "70f32caa-12a2-49f1-9095-dce9f188890c",
                                            "object": "license",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00",
                                            "start": "2018-11-13T20:20:39+00:00",
                                            "end": "2020-11-13T20:20:39+00:00",
                                            "account_id": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5",
                                            "apps": [
                                                "ccrm"
                                            ],
                                            "user_count": 10
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Create a License.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/License"
                            },
                            "examples": {
                                "Create an License": {
                                    "value": {
                                        "id": "70f32caa-12a2-49f1-9095-dce9f188890c",
                                        "object": "license",
                                        "start": "2018-11-13T20:20:39+00:00",
                                        "end": "2020-11-13T20:20:39+00:00",
                                        "account_id": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5",
                                        "apps": [
                                            "ccrm"
                                        ],
                                        "user_count": 10
                                    }
                                }
                            }
                        }
                    },
                    "description": ""
                },
                "operationId": "createLicense"
            },
            "parameters": []
        },
        "/api/v0/admin/functions/": {
            "get": {
                "summary": "Get Functions",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "object": {
                                            "type": "string",
                                            "enum": [
                                                "list"
                                            ],
                                            "example": "list",
                                            "pattern": "list"
                                        },
                                        "item_type": {
                                            "type": "string",
                                            "description": "The type of objects stored in the list",
                                            "enum": [
                                                "function"
                                            ],
                                            "example": "function",
                                            "pattern": "function"
                                        },
                                        "has_more": {
                                            "type": "boolean",
                                            "example": "false"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Function"
                                            }
                                        }
                                    },
                                    "required": [
                                        "object",
                                        "item_type",
                                        "has_more",
                                        "data"
                                    ]
                                },
                                "examples": {
                                    "All Functions": {
                                        "value": {
                                            "object": "list",
                                            "item_type": "function",
                                            "has_more": false,
                                            "data": [
                                                {
                                                    "id": "91b82596-87a3-499f-8bd9-2c70df831a99",
                                                    "object": "function",
                                                    "key": "app.admin",
                                                    "description": "All CleanData Admin functionality",
                                                    "enabled": false,
                                                    "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                                    "created": "2018-11-13T20:20:39+00:00",
                                                    "modifed": "2018-11-13T20:20:39+00:00"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "List all Functions.",
                "parameters": [],
                "operationId": "getFunctions"
            },
            "post": {
                "summary": "Create Function",
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Function"
                                },
                                "examples": {
                                    "Created": {
                                        "value": {
                                            "id": "91b82596-87a3-499f-8bd9-2c70df831a99",
                                            "object": "function",
                                            "key": "app.admin",
                                            "description": "All CleanData Admin functionality",
                                            "enabled": false,
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00"
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Create a Function.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FunctionUpsert"
                            },
                            "examples": {
                                "Create a Function": {
                                    "value": {
                                        "enabled": false,
                                        "description": "All CleanData Admin functionality",
                                        "key": "app.admin"
                                    }
                                }
                            }
                        }
                    },
                    "description": ""
                },
                "operationId": "createFunction"
            },
            "parameters": []
        },
        "/api/v0/admin/functions/{id}": {
            "get": {
                "summary": "Get Function by ID",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Function"
                                },
                                "examples": {
                                    "Function": {
                                        "value": {
                                            "id": "91b82596-87a3-499f-8bd9-2c70df831a99",
                                            "object": "function",
                                            "key": "app.admin",
                                            "description": "All CleanData Admin functionality",
                                            "enabled": false,
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00"
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Retrieve a Function.",
                "parameters": [],
                "operationId": "getFunctionById"
            },
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "description": "uuid",
                    "required": true
                }
            ],
            "delete": {
                "summary": "Delete Function",
                "responses": {
                    "200": {
                        "description": "Deletion was successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                },
                                "examples": {
                                    "example-1": {}
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Delete the Function.",
                "operationId": "deleteFunction"
            },
            "post": {
                "summary": "Update Function",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Function"
                                },
                                "examples": {
                                    "Updated Function": {
                                        "value": {
                                            "id": "91b82596-87a3-499f-8bd9-2c70df831a99",
                                            "object": "function",
                                            "key": "app.admin",
                                            "description": "All CleanData Admin functionality",
                                            "enabled": false,
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00"
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Update the Function.",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FunctionUpsert"
                            },
                            "examples": {
                                "Update Function Example": {
                                    "value": {
                                        "enabled": false,
                                        "description": "All CleanData Admin functionality",
                                        "key": "app.admin"
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [],
                "operationId": "updateFunction"
            }
        },
        "/api/v0/admin/users/{id}/direct_reports": {
            "get": {
                "summary": "Get Direct Reports",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "object": {
                                            "type": "string",
                                            "enum": [
                                                "list"
                                            ],
                                            "example": "list",
                                            "pattern": "list"
                                        },
                                        "item_type": {
                                            "type": "string",
                                            "description": "The type of objects stored in the list",
                                            "enum": [
                                                "user"
                                            ],
                                            "example": "user",
                                            "pattern": "user"
                                        },
                                        "has_more": {
                                            "type": "boolean",
                                            "example": "false"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/User"
                                            }
                                        }
                                    },
                                    "required": [
                                        "object",
                                        "item_type",
                                        "has_more",
                                        "data"
                                    ]
                                },
                                "examples": {
                                    "All Direct Reports": {
                                        "value": {
                                            "object": "list",
                                            "item_type": "user",
                                            "has_more": false,
                                            "data": [
                                                {
                                                    "id": "d463677e-2060-4db0-8985-35585a8bc90c",
                                                    "object": "user",
                                                    "first": "Don",
                                                    "last": "Johnson",
                                                    "email": "don.johnson@activeprime.com",
                                                    "status": "enabled",
                                                    "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                                    "manager_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                                    "role_id": "2473c912-ea9c-4f89-8d85-32e39cb8275f",
                                                    "account_id": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5",
                                                    "created": "2018-11-13T20:20:39+00:00",
                                                    "modifed": "2018-11-13T20:20:39+00:00",
                                                    "last_login": "2018-11-13T20:20:39+00:00"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "List all Direct Reports of this user.",
                "parameters": [],
                "operationId": "getDirectReports"
            }
        },
        "/api/v0/admin/rules/": {
            "get": {
                "summary": "Get Rules",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "object": {
                                            "type": "string",
                                            "enum": [
                                                "list"
                                            ],
                                            "example": "list",
                                            "pattern": "list"
                                        },
                                        "item_type": {
                                            "type": "string",
                                            "description": "The type of objects stored in the list",
                                            "example": "rule",
                                            "pattern": "rule"
                                        },
                                        "has_more": {
                                            "type": "boolean",
                                            "example": "false"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Rule"
                                            }
                                        }
                                    },
                                    "required": [
                                        "object",
                                        "item_type",
                                        "has_more",
                                        "data"
                                    ]
                                },
                                "examples": {
                                    "All Rules": {
                                        "value": {
                                            "object": "list",
                                            "item_type": "rule",
                                            "has_more": false,
                                            "data": [
                                                {
                                                    "id": "052d7fbe-7c5a-4a71-a439-f8bcb5479d6f",
                                                    "object": "rule",
                                                    "name": "UK Filter",
                                                    "description": "Exact filtering of UK based records.",
                                                    "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                                    "created": "2018-11-13T20:20:39+00:00",
                                                    "modifed": "2018-11-13T20:20:39+00:00",
                                                    "type": "filter",
                                                    "rule": {},
                                                    "status": "draft"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "List all Rules.",
                "parameters": [],
                "operationId": "getRules"
            },
            "post": {
                "summary": "Create Rule",
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Rule"
                                },
                                "examples": {
                                    "Created Rule": {
                                        "value": {
                                            "id": "052d7fbe-7c5a-4a71-a439-f8bcb5479d6f",
                                            "object": "rule",
                                            "name": "UK Filter",
                                            "description": "Exact filtering of UK based records.",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00",
                                            "type": "filter",
                                            "rule": {},
                                            "status": "active"
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Create a Rule.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Rule"
                            },
                            "examples": {
                                "Create a Rule": {
                                    "value": {
                                        "object": "rule",
                                        "name": "UK Filter",
                                        "description": "Exact filtering of UK based records.",
                                        "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                        "created": "2018-11-13T20:20:39+00:00",
                                        "modifed": "2018-11-13T20:20:39+00:00",
                                        "type": "filter",
                                        "rule": {},
                                        "status": "active"
                                    }
                                }
                            }
                        }
                    },
                    "description": ""
                },
                "operationId": "createRule"
            },
            "parameters": []
        },
        "/api/v0/admin/rules/{id}": {
            "get": {
                "summary": "Get Rule by ID",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Rule"
                                },
                                "examples": {
                                    "Rule": {
                                        "value": {
                                            "id": "052d7fbe-7c5a-4a71-a439-f8bcb5479d6f",
                                            "object": "rule",
                                            "name": "UK Filter",
                                            "description": "Exact filtering of UK based records.",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00",
                                            "type": "filter",
                                            "rule": {},
                                            "status": "active"
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Retrieve a Rule.",
                "parameters": [],
                "operationId": "getRuleById"
            },
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "description": "uuid",
                    "required": true
                }
            ],
            "delete": {
                "summary": "Delete Rule",
                "responses": {
                    "200": {
                        "description": "Deletion was successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                },
                                "examples": {}
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Delete the Rule.",
                "operationId": "deleteRule"
            },
            "post": {
                "summary": "Update Role",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Rule"
                                },
                                "examples": {
                                    "Updated Rule": {
                                        "value": {
                                            "id": "052d7fbe-7c5a-4a71-a439-f8bcb5479d6f",
                                            "object": "rule",
                                            "name": "UK Filter",
                                            "description": "Exact filtering of UK based records.",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00",
                                            "type": "filter",
                                            "rule": {},
                                            "status": "active"
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Update the Rule.",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Rule"
                            },
                            "examples": {
                                "Update Rule Example": {
                                    "value": {
                                        "id": "052d7fbe-7c5a-4a71-a439-f8bcb5479d6f",
                                        "status": "active"
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [],
                "operationId": "updateRule"
            }
        },
        "/api/v0/admin/multimaps/": {
            "get": {
                "summary": "Get MultiMaps",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "object": {
                                            "type": "string",
                                            "enum": [
                                                "list"
                                            ],
                                            "example": "list",
                                            "pattern": "list"
                                        },
                                        "item_type": {
                                            "type": "string",
                                            "description": "The type of objects stored in the list",
                                            "example": "multimaps",
                                            "pattern": "multi maps",
                                            "enum": [
                                                "multimaps"
                                            ]
                                        },
                                        "has_more": {
                                            "type": "boolean",
                                            "example": "false"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/MultiMap"
                                            }
                                        }
                                    },
                                    "required": [
                                        "object",
                                        "item_type",
                                        "has_more",
                                        "data"
                                    ]
                                },
                                "examples": {
                                    "All MultiMaps": {
                                        "value": {
                                            "object": "list",
                                            "item_type": "multimap",
                                            "has_more": false,
                                            "data": [
                                                {
                                                    "id": "8d43b2ac-ae41-4b5d-b928-0b80dbabc1cb",
                                                    "object": "multimap",
                                                    "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                                    "created": "2018-11-13T20:20:39+00:00",
                                                    "modifed": "2018-11-13T20:20:39+00:00",
                                                    "connection_id": "9b40c303-4fce-4482-89a3-6df6a1eea6df",
                                                    "name": "Dreamforce A-L map",
                                                    "description": "Account and Lead mapping for SF Dreamforce 2020.",
                                                    "labels": [
                                                        "Company Name"
                                                    ],
                                                    "entity_field_maps": [
                                                        {
                                                            "id": "b995077d-d8de-4385-96ce-8222bcebfcfc",
                                                            "entity_name": "Account",
                                                            "entity_type": "Company",
                                                            "fields": [
                                                                "Name",
                                                                "Phone"
                                                            ],
                                                            "field_types": [
                                                                "CompanyName",
                                                                "Phone"
                                                            ]
                                                        },
                                                        {
                                                            "id": "c995077d-d8de-4385-96ce-8222bcebfcfc",
                                                            "entity_name": "Lead",
                                                            "entity_type": "Lead",
                                                            "fields": [
                                                                "Company",
                                                                "Phone"
                                                            ],
                                                            "field_types": [
                                                                "CompanyName",
                                                                "Phone"
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "List all MultiMaps.",
                "parameters": [],
                "operationId": "getMultiMaps"
            },
            "post": {
                "summary": "Create MultiMap",
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MultiMap"
                                },
                                "examples": {
                                    "Created MultiMap": {
                                        "value": {
                                            "id": "8d43b2ac-ae41-4b5d-b928-0b80dbabc1cb",
                                            "object": "multimap",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00",
                                            "connection_id": "9b40c303-4fce-4482-89a3-6df6a1eea6df",
                                            "name": "Dreamforce A-L map",
                                            "description": "Account and Lead mapping for SF Dreamforce 2020.",
                                            "labels": [
                                                "Company Name"
                                            ],
                                            "entity_field_maps": [
                                                {
                                                    "id": "b995077d-d8de-4385-96ce-8222bcebfcfc",
                                                    "entity_name": "Account",
                                                    "entity_type": "Company",
                                                    "fields": [
                                                        "Name",
                                                        "Phone"
                                                    ],
                                                    "field_types": [
                                                        "CompanyName",
                                                        "Phone"
                                                    ]
                                                },
                                                {
                                                    "id": "c995077d-d8de-4385-96ce-8222bcebfcfc",
                                                    "entity_name": "Lead",
                                                    "entity_type": "Lead",
                                                    "fields": [
                                                        "Company",
                                                        "Phone"
                                                    ],
                                                    "field_types": [
                                                        "CompanyName",
                                                        "Phone"
                                                    ]
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Create a MultiMap.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MultiMap"
                            },
                            "examples": {
                                "Create a Rule": {
                                    "value": {
                                        "object": "multimap",
                                        "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                        "created": "2018-11-13T20:20:39+00:00",
                                        "modifed": "2018-11-13T20:20:39+00:00",
                                        "connection_id": "9b40c303-4fce-4482-89a3-6df6a1eea6df",
                                        "name": "Dreamforce A-L map",
                                        "description": "Account and Lead mapping for SF Dreamforce 2020.",
                                        "labels": [
                                            "Company Name",
                                            "Phone"
                                        ],
                                        "entity_field_maps": []
                                    }
                                }
                            }
                        }
                    },
                    "description": ""
                },
                "operationId": "createMultiMap"
            },
            "parameters": []
        },
        "/api/v0/admin/multimaps/{id}": {
            "get": {
                "summary": "Get MultiMap by ID",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MultiMap"
                                },
                                "examples": {
                                    "Example Get MultiMap": {
                                        "value": {
                                            "id": "8d43b2ac-ae41-4b5d-b928-0b80dbabc1cb",
                                            "object": "multimap",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00",
                                            "connection_id": "9b40c303-4fce-4482-89a3-6df6a1eea6df",
                                            "name": "Dreamforce A-L map",
                                            "description": "Account and Lead mapping for SF Dreamforce 2020.",
                                            "labels": [
                                                "Company Name"
                                            ],
                                            "entity_field_maps": [
                                                {
                                                    "id": "b995077d-d8de-4385-96ce-8222bcebfcfc",
                                                    "entity_name": "Account",
                                                    "entity_type": "Company",
                                                    "fields": [
                                                        "Name",
                                                        "Phone"
                                                    ],
                                                    "field_types": [
                                                        "CompanyName",
                                                        "Phone"
                                                    ]
                                                },
                                                {
                                                    "id": "c995077d-d8de-4385-96ce-8222bcebfcfc",
                                                    "entity_name": "Lead",
                                                    "entity_type": "Lead",
                                                    "fields": [
                                                        "Company",
                                                        "Phone"
                                                    ],
                                                    "field_types": [
                                                        "CompanyName",
                                                        "Phone"
                                                    ]
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Retrieve a MultiMap.",
                "parameters": [],
                "operationId": "getMultiMapById"
            },
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "description": "uuid",
                    "required": true
                }
            ],
            "delete": {
                "summary": "Delete MultiMap",
                "responses": {
                    "200": {
                        "description": "Deletion was successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                },
                                "examples": {}
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Delete the MultiMap.",
                "operationId": "deleteMultiMap"
            },
            "post": {
                "summary": "Update MultiMap",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MultiMap"
                                },
                                "examples": {
                                    "Updated MultiMap": {
                                        "value": {
                                            "id": "8d43b2ac-ae41-4b5d-b928-0b80dbabc1cb",
                                            "object": "multimap",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00",
                                            "connection_id": "9b40c303-4fce-4482-89a3-6df6a1eea6df",
                                            "name": "Hello world",
                                            "description": "Account and Lead mapping for SF Dreamforce 2020.",
                                            "labels": [
                                                "Company Name"
                                            ],
                                            "entity_field_maps": [
                                                {
                                                    "id": "b995077d-d8de-4385-96ce-8222bcebfcfc",
                                                    "entity_name": "Account",
                                                    "entity_type": "Company",
                                                    "fields": [
                                                        "Name",
                                                        "Phone"
                                                    ],
                                                    "field_types": [
                                                        "CompanyName",
                                                        "Phone"
                                                    ]
                                                },
                                                {
                                                    "id": "c995077d-d8de-4385-96ce-8222bcebfcfc",
                                                    "entity_name": "Lead",
                                                    "entity_type": "Lead",
                                                    "fields": [
                                                        "Company",
                                                        "Phone"
                                                    ],
                                                    "field_types": [
                                                        "CompanyName",
                                                        "Phone"
                                                    ]
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Update the MultiMap.",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MultiMap"
                            },
                            "examples": {
                                "Update MultiMap Example": {
                                    "value": {
                                        "name": "Hello world"
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [],
                "operationId": "update MultiMap"
            }
        },
        "/api/v0/admin/multimaps/{id}/entity_field_maps/": {
            "get": {
                "summary": "Get EntityFieldMaps",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "object": {
                                            "type": "string",
                                            "enum": [
                                                "list"
                                            ],
                                            "example": "list",
                                            "pattern": "list"
                                        },
                                        "item_type": {
                                            "type": "string",
                                            "description": "The type of objects stored in the list",
                                            "example": "rule",
                                            "pattern": "rule"
                                        },
                                        "has_more": {
                                            "type": "boolean",
                                            "example": "false"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/EntityFieldMap"
                                            }
                                        }
                                    },
                                    "required": [
                                        "object",
                                        "item_type",
                                        "has_more",
                                        "data"
                                    ]
                                },
                                "examples": {
                                    "All EntityFieldMaps": {
                                        "value": {
                                            "object": "list",
                                            "item_type": "entityfieldmap",
                                            "has_more": false,
                                            "data": [
                                                {
                                                    "object": "entityfieldmap",
                                                    "id": "b995077d-d8de-4385-96ce-8222bcebfcfc",
                                                    "entity_name": "Account",
                                                    "entity_type": "Company",
                                                    "fields": [
                                                        "Name",
                                                        "Phone"
                                                    ],
                                                    "field_types": [
                                                        "CompanyName",
                                                        "Phone"
                                                    ]
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "List all EntityFieldMaps on this MultiMap",
                "parameters": [],
                "operationId": "getEntityFieldMaps"
            },
            "post": {
                "summary": "Create EntityFieldMap",
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityFieldMap"
                                },
                                "examples": {
                                    "Created EntityFieldMap": {
                                        "value": {
                                            "id": "b995077d-d8de-4385-96ce-8222bcebfcfc",
                                            "object": "entityfieldmap",
                                            "entity_name": "Account",
                                            "entity_type": "Company",
                                            "fields": [
                                                "Name",
                                                "Phone"
                                            ],
                                            "field_types": [
                                                "CompanyName",
                                                "Phone"
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Create a EntityFieldMap on this MultiMap.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EntityFieldMap"
                            },
                            "examples": {
                                "Create an EntityFieldMap": {
                                    "value": {
                                        "object": "entityfieldmap",
                                        "entity_name": "Account",
                                        "entity_type": "Company",
                                        "fields": [
                                            "Name",
                                            "Phone"
                                        ],
                                        "field_types": [
                                            "CompanyName",
                                            "Phone"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "description": ""
                },
                "operationId": "create EntityFieldMap"
            },
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/api/v0/admin/multimaps/{id}/entity_field_maps/{id}": {
            "get": {
                "summary": "Get EntityFieldMap by ID",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityFieldMap"
                                },
                                "examples": {
                                    "Example EntityFieldMap response": {
                                        "value": {
                                            "id": "b995077d-d8de-4385-96ce-8222bcebfcfc",
                                            "object": "entityfieldmap",
                                            "entity_name": "Account",
                                            "entity_type": "Company",
                                            "fields": [
                                                "Name",
                                                "Phone"
                                            ],
                                            "field_types": [
                                                "CompanyName",
                                                "Phone"
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Retrieve a EntityFieldMap from this MultiMap.",
                "parameters": [],
                "operationId": "get EntityFieldMap ById"
            },
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "description": "uuid",
                    "required": true
                }
            ],
            "post": {
                "summary": "Update EntityFieldMap",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EntityFieldMap"
                                },
                                "examples": {
                                    "Updated EntityFieldMap": {
                                        "value": {
                                            "id": "b995077d-d8de-4385-96ce-8222bcebfcfc",
                                            "object": "entityfieldmap",
                                            "entity_name": "Account",
                                            "entity_type": "Company",
                                            "fields": [
                                                "Name",
                                                "Phone",
                                                "Web"
                                            ],
                                            "field_types": [
                                                "CompanyName",
                                                "Phone",
                                                "URL"
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Update the EntityFieldMap on this MultiMap.",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EntityFieldMap"
                            },
                            "examples": {
                                "Update EntityFieldMap Example": {
                                    "value": {
                                        "fields": [
                                            "Name",
                                            "Phone",
                                            "Web"
                                        ],
                                        "field_types": [
                                            "CompanyName",
                                            "Phone",
                                            "URL"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [],
                "operationId": "update EntityFieldMap"
            },
            "delete": {
                "summary": "Delete EntityFieldMap",
                "responses": {
                    "200": {
                        "description": "Deletion was successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                },
                                "examples": {}
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Delete the EntityFieldMap from this MultiMap.",
                "operationId": "delete EntityFieldMap"
            }
        },
        "/api/v0/agent/agents/{id}": {
            "get": {
                "summary": "DO NOT IMPLEMENT YET - Get Agent by ID",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Agent"
                                },
                                "examples": {
                                    "Agent": {
                                        "value": {
                                            "id": "f836910e-a00f-415b-895d-c0775bcc4bd0",
                                            "object": "agent",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00",
                                            "account_id": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5",
                                            "name": "Main dupe detection",
                                            "description": "Find duplicates across Account and Lead records"
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Retrieve an Agent.",
                "parameters": [],
                "operationId": "getAgentById",
                "security": [
                    {
                        "JWT": []
                    }
                ]
            },
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "description": "uuid",
                    "required": true
                }
            ],
            "delete": {
                "summary": "DO NOT IMPLEMENT YET - Delete Agent",
                "responses": {
                    "200": {
                        "description": "Deletion was successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                },
                                "examples": {
                                    "example-1": {}
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Delete the Agent.",
                "operationId": "deleteAgent"
            },
            "post": {
                "summary": "DO NOT IMPLEMENT YET - Update Agent",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Agent"
                                },
                                "examples": {
                                    "Updated Agent Example Response": {
                                        "value": {
                                            "id": "0deaa4cb-afcf-4a00-8570-b246f706c04d",
                                            "object": "registration",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00",
                                            "email": "dev@activeprime.com",
                                            "from_url": "https://activeprime.dev",
                                            "from_ip": "127.0.0.1",
                                            "start_datetime": "2020-11-13T20:20:39+00:00",
                                            "end_datetime": "2020-11-20T20:20:39+00:00",
                                            "is_used": true,
                                            "account_id": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5"
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Update the Agent.",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AgentUpsert"
                            },
                            "examples": {
                                "Update Agent Example": {
                                    "value": {
                                        "object": "agent",
                                        "name": "Main dupe detection",
                                        "description": "Find duplicates across Account and Lead records"
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [],
                "operationId": "updateAgent"
            }
        },
        "/api/v0/agent/agents": {
            "get": {
                "summary": "DO NOT IMPLEMENT YET - Get Agents",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "object": {
                                            "type": "string",
                                            "enum": [
                                                "list"
                                            ],
                                            "example": "list",
                                            "pattern": "list"
                                        },
                                        "item_type": {
                                            "type": "string",
                                            "description": "The type of objects stored in the list",
                                            "enum": [
                                                "agent"
                                            ],
                                            "example": "agent",
                                            "pattern": "agent"
                                        },
                                        "has_more": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Agent"
                                            }
                                        }
                                    },
                                    "required": [
                                        "object",
                                        "item_type",
                                        "has_more",
                                        "data"
                                    ]
                                },
                                "examples": {
                                    "All Agents Example Response": {
                                        "value": {
                                            "object": "list",
                                            "item_type": "agent",
                                            "has_more": false,
                                            "data": [
                                                {
                                                    "id": "f836910e-a00f-415b-895d-c0775bcc4bd0",
                                                    "object": "agent",
                                                    "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                                    "created": "2018-11-13T20:20:39+00:00",
                                                    "modifed": "2018-11-13T20:20:39+00:00",
                                                    "account_id": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5",
                                                    "name": "Main dupe detection",
                                                    "description": "Find duplicates across Account and Lead records"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "List Agents",
                "parameters": [],
                "operationId": "getAgents"
            },
            "post": {
                "summary": "DO NOT IMPLEMENT YET - Create an Agent",
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Agent"
                                },
                                "examples": {
                                    "Created Agent Example Response": {
                                        "value": {
                                            "id": "f836910e-a00f-415b-895d-c0775bcc4bd0",
                                            "object": "agent",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00",
                                            "account_id": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5",
                                            "name": "Main dupe detection",
                                            "description": "Find duplicates across Account and Lead records"
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Create an Agent.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AgentUpsert"
                            },
                            "examples": {
                                "Create a Registration": {
                                    "value": {
                                        "object": "agent",
                                        "name": "Main dupe detection"
                                    }
                                }
                            }
                        }
                    },
                    "description": ""
                },
                "operationId": "createAgent"
            },
            "parameters": []
        },
        "/api/v0/agent/{id}/find_dupe_set": {
            "post": {
                "summary": "Have an Agent Find a DupeSet",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DupeSetResponse"
                                },
                                "examples": {
                                    "Get DupeSet Response": {
                                        "value": {
                                            "id": "010a8566-52c4-4add-a64f-5d423c121612",
                                            "object": "dupeset",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00",
                                            "account_id": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5",
                                            "estimated_seconds_to_complete": 120,
                                            "columns": [
                                                {
                                                    "id": "070b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                    "name": "id",
                                                    "label": "Primary",
                                                    "conflicted": false,
                                                    "selectable": true,
                                                    "locked": false,
                                                    "is_primary": true,
                                                    "group_selection": true
                                                },
                                                {
                                                    "id": "170b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                    "name": "source",
                                                    "label": "Source",
                                                    "conflicted": false,
                                                    "selectable": false,
                                                    "locked": false
                                                },
                                                {
                                                    "id": "270b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                    "name": "name",
                                                    "label": "Name",
                                                    "conflicted": true,
                                                    "selectable": true,
                                                    "locked": false
                                                },
                                                {
                                                    "id": "370b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                    "name": "street",
                                                    "label": "Billing Street",
                                                    "conflicted": true,
                                                    "selectable": true,
                                                    "locked": false
                                                },
                                                {
                                                    "id": "470b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                    "name": "lead_source",
                                                    "label": "Lead Source",
                                                    "conflicted": false,
                                                    "selectable": false,
                                                    "locked": true
                                                },
                                                {
                                                    "id": "770b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                    "name": "RecordType",
                                                    "label": "Record Type",
                                                    "conflicted": false,
                                                    "selectable": false,
                                                    "locked": true
                                                },
                                                {
                                                    "id": "570b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                    "name": "state",
                                                    "label": "Billing State",
                                                    "conflicted": false,
                                                    "selectable": false,
                                                    "locked": false
                                                },
                                                {
                                                    "id": "31da82be-6bc9-4417-ba1a-e70e05f645bc",
                                                    "name": "description",
                                                    "label": "Description",
                                                    "conflictable": true,
                                                    "locked": false,
                                                    "selectable": false,
                                                    "combine": true
                                                },
                                                {
                                                    "id": "670b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                    "name": "phone",
                                                    "label": "Phone Number",
                                                    "conflicted": true,
                                                    "selectable": false,
                                                    "locked": false
                                                },
                                                {
                                                    "id": "962a817e-9b2e-4fd6-ba8c-72c4df3578a1",
                                                    "name": "email",
                                                    "label": "Email",
                                                    "conflictable": true,
                                                    "locked": false,
                                                    "selectable": false
                                                },
                                                {
                                                    "id": "21a3e634-1dcd-4aa9-a9cb-bc81bf343bf7",
                                                    "name": "website",
                                                    "label": "Website",
                                                    "conflictable": true,
                                                    "locked": false,
                                                    "selectable": false
                                                }
                                            ],
                                            "rows": [
                                                {
                                                    "id": "16d6da28-4af3-4a31-9a74-63ea18db47fc",
                                                    "locked": true,
                                                    "group": "Lead",
                                                    "data": {
                                                        "source": "Lead",
                                                        "name": "First Alarm & Co",
                                                        "street": "2335 N. Michigan Avenue",
                                                        "lead_source": "Exposition",
                                                        "state": "New York",
                                                        "RecordType": "Marketplace",
                                                        "phone": "+1-213-241-6202",
                                                        "description": "First Alarm on Michigan Ave.",
                                                        "email": "first@alrm.co",
                                                        "website": "firstalrm.co"
                                                    }
                                                },
                                                {
                                                    "id": "26d6da28-4af3-4a31-9a74-63ea18db47fc",
                                                    "locked": false,
                                                    "group": "Account",
                                                    "never_merge_disabled": true,
                                                    "data": {
                                                        "source": "Account",
                                                        "name": "First Alarm",
                                                        "street": "2335 N. Michigan Avenue",
                                                        "lead_source": "Exposition",
                                                        "state": "New York",
                                                        "RecordType": "Marketplace",
                                                        "phone": "1213-241-6201",
                                                        "description": "",
                                                        "email": "first@alrm.co",
                                                        "website": "firstalrm.co"
                                                    }
                                                },
                                                {
                                                    "id": "36d6da28-4af3-4a31-9a74-63ea18db47fc",
                                                    "locked": false,
                                                    "group": "Account",
                                                    "never_merge_disabled": true,
                                                    "data": {
                                                        "source": "Account",
                                                        "name": "First Alarm",
                                                        "street": "2335 Michigan Avenue",
                                                        "lead_source": "",
                                                        "state": "New York",
                                                        "RecordType": "Marketplace",
                                                        "phone": "+1-213-241-6202",
                                                        "description": "",
                                                        "email": "first@alrm.co",
                                                        "website": "firstalrm.co"
                                                    }
                                                },
                                                {
                                                    "id": "46d6da28-4af3-4a31-9a74-63ea18db47fc",
                                                    "locked": false,
                                                    "group": "Lead",
                                                    "data": {
                                                        "source": "Lead",
                                                        "name": "FirstAlarm",
                                                        "street": "2335 N. Michigan Avenue",
                                                        "lead_source": "Trade Show",
                                                        "state": "New York",
                                                        "RecordType": "Marketplace",
                                                        "phone": "+1-213-241-6201",
                                                        "description": "",
                                                        "email": "first@alrm.co",
                                                        "website": "firstalrm.co"
                                                    }
                                                },
                                                {
                                                    "id": "56d6da28-4af3-4a31-9a74-63ea18db47fc",
                                                    "locked": true,
                                                    "group": "Lead",
                                                    "data": {
                                                        "source": "Lead",
                                                        "name": "1st Alarm",
                                                        "street": "2335 N. Michigan Avenue",
                                                        "lead_source": "Trade Show",
                                                        "state": "New York",
                                                        "RecordType": "Marketplace",
                                                        "phone": "+1-213-241-6201",
                                                        "description": "Another first alarm",
                                                        "email": "first@alrm.co",
                                                        "website": "firstalrm.co"
                                                    }
                                                },
                                                {
                                                    "id": "66d6da28-4af3-4a31-9a74-63ea18db47fc",
                                                    "locked": false,
                                                    "group": "Account",
                                                    "data": {
                                                        "source": "Account",
                                                        "name": "1st Alarm & Co",
                                                        "street": "2335 N. Michigan Avenue",
                                                        "lead_source": "",
                                                        "state": "New York",
                                                        "RecordType": "Enterprise Marketplace",
                                                        "phone": "1-213-241-6201",
                                                        "description": "",
                                                        "email": "first@alrm.co",
                                                        "website": "firstalrm.co"
                                                    }
                                                },
                                                {
                                                    "id": "76d6da28-4af3-4a31-9a74-63ea18db47fc",
                                                    "locked": false,
                                                    "group": "Account",
                                                    "data": {
                                                        "source": "Account",
                                                        "name": "1st Alarm & Co",
                                                        "street": "2335 N. Michigan Avenue",
                                                        "lead_source": "",
                                                        "state": "New York",
                                                        "RecordType": "Enterprise Marketplace",
                                                        "phone": "1-213-241-6201",
                                                        "description": "",
                                                        "email": "first@alrm.co",
                                                        "website": "firstalrm.co"
                                                    }
                                                },
                                                {
                                                    "id": "86d6da28-4af3-4a31-9a74-63ea18db47fc",
                                                    "locked": false,
                                                    "group": "Account",
                                                    "data": {
                                                        "source": "Account",
                                                        "name": "1st Alarm & Co",
                                                        "street": "2335 N. Michigan Avenue",
                                                        "lead_source": "",
                                                        "state": "New York",
                                                        "RecordType": "Enterprise Marketplace",
                                                        "phone": "1-213-241-6201",
                                                        "description": "",
                                                        "email": "first@alrm.co",
                                                        "website": "firstalrm.co"
                                                    }
                                                },
                                                {
                                                    "id": "96d6da28-4af3-4a31-9a74-63ea18db47fc",
                                                    "locked": false,
                                                    "group": "Account",
                                                    "data": {
                                                        "source": "Account",
                                                        "name": "1st Alarm & Co",
                                                        "street": "2335 N. Michigan Avenue",
                                                        "lead_source": "",
                                                        "state": "New York",
                                                        "RecordType": "Enterprise Marketplace",
                                                        "phone": "1-213-241-6201",
                                                        "description": "",
                                                        "email": "first@alrm.co",
                                                        "website": "firstalrm.co"
                                                    }
                                                },
                                                {
                                                    "id": "106d6da28-4af3-4a31-9a74-63ea18db47fc",
                                                    "locked": false,
                                                    "group": "Account",
                                                    "data": {
                                                        "source": "Account",
                                                        "name": "1st Alarm & Co",
                                                        "street": "2335 N. Michigan Avenue",
                                                        "lead_source": "",
                                                        "state": "New York",
                                                        "RecordType": "Enterprise Marketplace",
                                                        "phone": "1-213-241-6201",
                                                        "description": "",
                                                        "email": "first@alrm.co",
                                                        "website": "firstalrm.co"
                                                    }
                                                },
                                                {
                                                    "id": "116d6da28-4af3-4a31-9a74-63ea18db47fc",
                                                    "locked": false,
                                                    "group": "Account",
                                                    "data": {
                                                        "source": "Account",
                                                        "name": "1st Alarm & Co",
                                                        "street": "2335 N. Michigan Avenue",
                                                        "lead_source": "",
                                                        "state": "New York",
                                                        "RecordType": "Enterprise Marketplace",
                                                        "phone": "1-213-241-6201",
                                                        "description": "",
                                                        "email": "first@alrm.co",
                                                        "website": "firstalrm.co"
                                                    }
                                                },
                                                {
                                                    "id": "126d6da28-4af3-4a31-9a74-63ea18db47fc",
                                                    "locked": false,
                                                    "group": "Account",
                                                    "data": {
                                                        "source": "Account",
                                                        "name": "1st Alarm & Co",
                                                        "street": "2335 N. Michigan Avenue",
                                                        "lead_source": "",
                                                        "state": "New York",
                                                        "RecordType": "Enterprise Marketplace",
                                                        "phone": "1-213-241-6201",
                                                        "description": "",
                                                        "email": "first@alrm.co",
                                                        "website": "firstalrm.co"
                                                    }
                                                }
                                            ],
                                            "cells": [
                                                {
                                                    "column_id": "070b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                    "row_id": "26d6da28-4af3-4a31-9a74-63ea18db47fc",
                                                    "selected": true
                                                },
                                                {
                                                    "column_id": "170b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                    "row_id": "26d6da28-4af3-4a31-9a74-63ea18db47fc",
                                                    "selected": true
                                                },
                                                {
                                                    "column_id": "270b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                    "row_id": "26d6da28-4af3-4a31-9a74-63ea18db47fc",
                                                    "record_link": "https://qaap1-dev-ed.lightning.force.com/lightning/r/Account/0013t00001XzLEOAA3/view",
                                                    "selected": true
                                                },
                                                {
                                                    "column_id": "370b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                    "row_id": "26d6da28-4af3-4a31-9a74-63ea18db47fc",
                                                    "selected": true
                                                },
                                                {
                                                    "column_id": "470b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                    "row_id": "26d6da28-4af3-4a31-9a74-63ea18db47fc",
                                                    "selected": true
                                                },
                                                {
                                                    "column_id": "770b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                    "row_id": "26d6da28-4af3-4a31-9a74-63ea18db47fc",
                                                    "selected": true
                                                },
                                                {
                                                    "column_id": "570b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                    "row_id": "26d6da28-4af3-4a31-9a74-63ea18db47fc",
                                                    "selected": true
                                                },
                                                {
                                                    "column_id": "31da82be-6bc9-4417-ba1a-e70e05f645bc",
                                                    "row_id": "26d6da28-4af3-4a31-9a74-63ea18db47fc",
                                                    "selected": true
                                                },
                                                {
                                                    "column_id": "670b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                    "row_id": "26d6da28-4af3-4a31-9a74-63ea18db47fc",
                                                    "selected": true
                                                },
                                                {
                                                    "column_id": "962a817e-9b2e-4fd6-ba8c-72c4df3578a1",
                                                    "row_id": "26d6da28-4af3-4a31-9a74-63ea18db47fc",
                                                    "selected": true
                                                },
                                                {
                                                    "column_id": "21a3e634-1dcd-4aa9-a9cb-bc81bf343bf7",
                                                    "row_id": "26d6da28-4af3-4a31-9a74-63ea18db47fc",
                                                    "selected": true
                                                }
                                            ],
                                            "final_record": {
                                                "id": "26d6da28-4af3-4a31-9a74-63ea18db47fc",
                                                "source": "Account",
                                                "name": "First Alarm",
                                                "street": "2335 N. Michigan Avenue",
                                                "lead_source": "Exposition",
                                                "state": "New York",
                                                "RecordType": "Marketplace",
                                                "phone": "1213-241-6201",
                                                "email": "first@alrm.co",
                                                "website": "firstalrm.co",
                                                "description": "First Alarm on Michigan Ave.; Another first alarm"
                                            },
                                            "final_record_editable_cells": [
                                                "name",
                                                "street",
                                                "state",
                                                "phone"
                                            ],
                                            "action": "merge",
                                            "bonus_points_countdown_seconds": 100
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    },
                    "": {
                        "description": ""
                    }
                },
                "operationId": "find_dupe_set",
                "description": "Have the Agent find the DupeSet associated with the provided query.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "type": "object",
                                        "example": "{ \"first_name\": \"Joe\", \"last_name\": \"Smith\", \"company\": \"Acme Widgets\",\"email\":\"joe@acmewidgets.com\"}",
                                        "required": [
                                            "entity_key",
                                            "entity_name"
                                        ],
                                        "properties": {
                                            "entity_key": {
                                                "type": "string",
                                                "example": "the CRM record id",
                                                "description": "The ID in the CRM system of this record."
                                            },
                                            "entity_name": {
                                                "type": "string",
                                                "example": "Account",
                                                "description": "The backend name of the entity in the CRM system."
                                            }
                                        }
                                    }
                                },
                                "required": [
                                    "data"
                                ]
                            },
                            "examples": {
                                "Example Agent Find DupeSet Request": {
                                    "value": {
                                        "entity_key": "account record id goes here",
                                        "entity_name": "Account"
                                    }
                                }
                            }
                        }
                    },
                    "description": ""
                }
            },
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/api/v0/agent/dupe_set/{id}/merge": {
            "post": {
                "summary": "Merge a DupeSet",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "merge_request_id": {
                                            "type": "string",
                                            "description": "The back-end id of the merge request.",
                                            "format": "uuid",
                                            "example": "f1886824-e994-4d90-87b9-8b506c0ed1f5"
                                        }
                                    },
                                    "required": [
                                        "merge_request_id"
                                    ]
                                },
                                "examples": {
                                    "Merge a DupeSet Response": {
                                        "value": {
                                            "merge_request_id": "f1886824-e994-4d90-87b9-8b506c0ed1f5"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "operationId": "merge_dupe_set",
                "description": "Merge the Dupe Set or send the Dupe Set to another user who can merge.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "action": {
                                        "type": "string",
                                        "enum": [
                                            "merge",
                                            "send_to_other"
                                        ],
                                        "example": "merge",
                                        "description": "The merge action to perform. Valid entries are \"merge\" or \"send_to_other\". A \"merge\" will perform an actual merge. A \"send_to_other\" will send the merge to another user who can perform the merge."
                                    },
                                    "column_changes": {
                                        "type": "array",
                                        "description": "The changes that are to be applied to this column.",
                                        "items": {
                                            "$ref": "#/components/schemas/ColumnChange"
                                        }
                                    }
                                },
                                "required": [
                                    "action",
                                    "column_changes"
                                ]
                            },
                            "examples": {
                                "Example Dupe Set Merge Request": {
                                    "value": {
                                        "action": "merge",
                                        "column_changes": [
                                            {
                                                "column_id": "270b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                "selected_row_id": "46d6da28-4af3-4a31-9a74-63ea18db47fc",
                                                "value": "1st Alarm"
                                            },
                                            {
                                                "column_id": "46d6da28-4af3-4a31-9a74-63ea18db47fc",
                                                "selected_row_id": "",
                                                "value": "2335 Michigan Ave"
                                            }
                                        ]
                                    }
                                },
                                "Example Dupe Set Send to Admin Request": {
                                    "value": {
                                        "action": "send_to_other",
                                        "column_changes": [
                                            {
                                                "column_id": "270b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                "selected_row_id": "46d6da28-4af3-4a31-9a74-63ea18db47fc",
                                                "value": "1st Alarm"
                                            },
                                            {
                                                "column_id": "46d6da28-4af3-4a31-9a74-63ea18db47fc",
                                                "selected_row_id": "",
                                                "value": "2335 Michigan Ave"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "description": ""
                }
            },
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/api/v0/agent/dupe_set/{id}/cancel_merge": {
            "post": {
                "summary": "Cancel a merge request",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "examples": {
                                    "example-1": {}
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "operationId": "cancel_merge",
                "description": "Cancel a merge request",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {},
                            "examples": {
                                "example-1": {}
                            }
                        }
                    },
                    "description": ""
                }
            },
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/api/v0/agent/dupe_set/{id}/record/{id}/do_not_merge": {
            "post": {
                "summary": "Flag a Record as Do Not Merge",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "examples": {}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "operationId": "do_not_merge",
                "description": "Flag a record as either do not merge now or never merge.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "scope": {
                                        "type": "string",
                                        "description": "The do_not_merge scope, which can be \"dupe_set\" or \"never\". A \"dupe_set\" scope implies that this record, in this specific dupe set, should not be merged. But the record could be merged in the future. A \"never' implies this record should never me merged.",
                                        "enum": [
                                            "never",
                                            "dupe_set",
                                            "merge"
                                        ],
                                        "example": "dupe_set"
                                    }
                                },
                                "required": [
                                    "scope"
                                ]
                            },
                            "examples": {
                                "Do Not Merge Example Request": {
                                    "value": {
                                        "scope": "never"
                                    }
                                }
                            }
                        }
                    },
                    "description": ""
                }
            },
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/api/v0/agent/dupe_set/{id}/send_message": {
            "post": {
                "summary": "Send a Message",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "examples": {}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "operationId": "dupe_set_send_message",
                "description": "Send a message that has something to do with this DupeSet.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "message": {
                                        "type": "string",
                                        "example": "Hello world",
                                        "description": "The text (body) of the message."
                                    }
                                },
                                "required": [
                                    "message"
                                ]
                            },
                            "examples": {
                                "Message Request": {
                                    "value": {
                                        "message": "hello world"
                                    }
                                }
                            }
                        }
                    },
                    "description": ""
                }
            },
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/api/v0/agent/dupe_set/{id}/change": {
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "required": true
                }
            ],
            "post": {
                "summary": "Change a DupeSet",
                "operationId": "change_dupe_set",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "change_request_id": {
                                            "type": "string",
                                            "description": "The back-end id of the merge request.",
                                            "format": "uuid",
                                            "example": "f1886824-e994-4d90-87b9-8b506c0ed1f5"
                                        }
                                    },
                                    "required": [
                                        "change_request_id"
                                    ]
                                },
                                "examples": {
                                    "Change a DupeSet Response": {
                                        "value": {
                                            "change_request_id": "ef7dbd41-df7e-4ee9-b3d7-03ddb34278a15"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Apply a user's change to a dupe set. For instance, the user has manually edited the City of the final record from NYC to New York.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "column_changes": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/ColumnChange"
                                        }
                                    }
                                }
                            },
                            "examples": {
                                "Example Dupe Set Change Request": {
                                    "value": {
                                        "column_changes": [
                                            {
                                                "column_id": "270b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                "selected_row_id": "46d6da28-4af3-4a31-9a74-63ea18db47fc",
                                                "value": "1st Alarm"
                                            },
                                            {
                                                "column_id": "46d6da28-4af3-4a31-9a74-63ea18db47fc",
                                                "selected_row_id": "",
                                                "value": "2335 Michigan Ave"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "description": ""
                }
            }
        },
        "/api/v0/agent/{id}/search": {
            "post": {
                "summary": "Search for records via the agent",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SearchResponse"
                                },
                                "examples": {
                                    "Get DupeSet Response": {
                                        "value": {
                                            "object": "search_result",
                                            "columns": [
                                                {
                                                    "id": "070b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                    "name": "primary",
                                                    "label": "Primary"
                                                },
                                                {
                                                    "id": "170b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                    "name": "source",
                                                    "label": "Source"
                                                },
                                                {
                                                    "id": "270b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                    "name": "name",
                                                    "label": "Name"
                                                },
                                                {
                                                    "id": "370b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                    "name": "street",
                                                    "label": "Billing Street"
                                                },
                                                {
                                                    "id": "470b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                    "name": "lead_source",
                                                    "label": "Lead Source"
                                                },
                                                {
                                                    "id": "770b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                    "name": "RecordType",
                                                    "label": "Record Type"
                                                },
                                                {
                                                    "id": "570b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                    "name": "state",
                                                    "label": "Billing State"
                                                },
                                                {
                                                    "id": "31da82be-6bc9-4417-ba1a-e70e05f645bc",
                                                    "name": "description",
                                                    "label": "Description"
                                                },
                                                {
                                                    "id": "670b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                    "name": "phone",
                                                    "label": "Phone Number"
                                                },
                                                {
                                                    "id": "962a817e-9b2e-4fd6-ba8c-72c4df3578a1",
                                                    "name": "email",
                                                    "label": "Email"
                                                },
                                                {
                                                    "id": "21a3e634-1dcd-4aa9-a9cb-bc81bf343bf7",
                                                    "name": "website",
                                                    "label": "Website"
                                                }
                                            ],
                                            "rows": [
                                                {
                                                    "id": "f2fd7f5f-f825-43ee-9fb5-7772fc8bc0f5",
                                                    "locked": true,
                                                    "data": {
                                                        "source": "Lead",
                                                        "name": "First Alarm & Co",
                                                        "street": "2335 N. Michigan Avenue",
                                                        "lead_source": "Exposition",
                                                        "state": "New York",
                                                        "RecordType": "Marketplace",
                                                        "phone": "+1-213-241-6202",
                                                        "description": "First Alarm on Michigan Ave.",
                                                        "email": "First@alarm.co",
                                                        "website": "firstalarm.com"
                                                    }
                                                },
                                                {
                                                    "id": "b054654b-7958-4869-a200-14d3ee220f44",
                                                    "locked": false,
                                                    "never_merge_disabled": true,
                                                    "data": {
                                                        "source": "Account",
                                                        "name": "First Alarm",
                                                        "street": "2335 N. Michigan Avenue",
                                                        "lead_source": "",
                                                        "state": "New York",
                                                        "RecordType": "Marketplace",
                                                        "phone": "1213-241-6201",
                                                        "description": "Another first alarm",
                                                        "email": "first@alrm.co",
                                                        "website": "firstalrm.co"
                                                    }
                                                },
                                                {
                                                    "id": "fe3d9889-43e2-4db4-a15d-671fe4b51c47",
                                                    "locked": false,
                                                    "never_merge_disabled": true,
                                                    "data": {
                                                        "source": "Account",
                                                        "name": "First Alarm",
                                                        "street": "2335 Michigan Avenue",
                                                        "lead_source": "",
                                                        "state": "New York",
                                                        "RecordType": "Marketplace",
                                                        "phone": "+1-213-241-6202",
                                                        "description": "Another first alarm",
                                                        "email": "first@alrm.co",
                                                        "website": "firstalrm.co"
                                                    }
                                                },
                                                {
                                                    "id": "23060d80-383a-425f-a6c6-b13f67abb3cb",
                                                    "locked": false,
                                                    "data": {
                                                        "source": "Lead",
                                                        "name": "FirstAlarm",
                                                        "street": "2335 N. Michigan Avenue",
                                                        "lead_source": "Trade Show",
                                                        "state": "New York",
                                                        "RecordType": "Marketplace",
                                                        "phone": "+1-213-241-6201",
                                                        "description": "Another first alarm",
                                                        "email": "first@alrm.co",
                                                        "website": "firstalrm.co"
                                                    }
                                                },
                                                {
                                                    "id": "45ad92a4-38db-44e8-8222-47b49cee94ee",
                                                    "locked": false,
                                                    "data": {
                                                        "source": "Lead",
                                                        "name": "1st Alarm",
                                                        "street": "2335 N. Michigan Avenue",
                                                        "lead_source": "Trade Show",
                                                        "state": "New York",
                                                        "RecordType": "Marketplace",
                                                        "phone": "+1-213-241-6201",
                                                        "description": "Another first alarm",
                                                        "email": "first@alrm.co",
                                                        "website": "firstalrm.co"
                                                    }
                                                },
                                                {
                                                    "id": "563deaf9-2e87-4a46-b11c-0433536cb0d7",
                                                    "locked": false,
                                                    "data": {
                                                        "source": "Account",
                                                        "name": "1st Alarm & Co",
                                                        "street": "2335 N. Michigan Avenue",
                                                        "lead_source": "",
                                                        "state": "New York",
                                                        "RecordType": "Enterprise Marketplace",
                                                        "phone": "1-213-241-6201",
                                                        "description": "Another first alarm",
                                                        "email": "first@alrm.co",
                                                        "website": "firstalrm.co"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    },
                    "": {
                        "description": ""
                    }
                },
                "operationId": "search",
                "description": "Have the Agent find the DupeSet associated with the provided query.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "company": {
                                        "type": "string",
                                        "description": "String to search company field to find relevant records."
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v0/agent/{id}/weekly_completion": {
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "required": true
                }
            ],
            "get": {
                "summary": "Weekly Completion",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "completion": {
                                            "type": "number",
                                            "description": "Number between 0.0 and 1.0 inclusive representing the weekly completion for the current user."
                                        }
                                    }
                                },
                                "examples": {
                                    "Sample Completion": {
                                        "value": {
                                            "completion": 0.74
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "get-agent-id-weekly_completion",
                "description": "Retrieve the weekly completion statistic for the current user"
            }
        },
        "/api/v0/agent/{id}/completion": {
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "required": true
                }
            ],
            "get": {
                "summary": "Completion History",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data_points": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "date": {
                                                        "type": "string",
                                                        "description": "ISO 8601 encoded data for the completion data point."
                                                    },
                                                    "completion": {
                                                        "type": "number",
                                                        "description": "Number between 0.0 and 1.0 inclusive which is the completion for the data"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "examples": {
                                    "Sample Completion": {
                                        "value": {
                                            "data_points": [
                                                {
                                                    "date": "2020-06-22T19:21:40Z",
                                                    "completion": 0.25
                                                },
                                                {
                                                    "date": "2020-06-23T19:21:40Z",
                                                    "completion": 0.4
                                                },
                                                {
                                                    "date": "2020-06-24T19:21:40Z",
                                                    "completion": 0.6
                                                },
                                                {
                                                    "date": "2020-06-25T19:21:40Z",
                                                    "completion": 0.6
                                                },
                                                {
                                                    "date": "2020-06-26T19:21:40Z",
                                                    "completion": 0.8
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "get-agent-id-completion",
                "description": "Retrieve the daily completion rate for the current user for the last 3 months"
            }
        },
        "/api/v0/agent/{id}/dupe_set": {
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "required": true
                }
            ],
            "post": {
                "summary": "Create Dupe Set",
                "operationId": "post-agent-id-dupe_set",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "description": "Id of the newly created dupe set"
                                        }
                                    }
                                },
                                "examples": {
                                    "example-1": {
                                        "value": {
                                            "id": "16d6da28-4af3-4a31-9a74-63ea18db47fc"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Create a new dupe set with given records",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "record_ids": {
                                        "type": "array",
                                        "description": "List of records in the dupe set",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "examples": {
                                "Create dupe set": {
                                    "value": {
                                        "record_ids": [
                                            "16d6da28-4af3-4a31-9a74-63ea18db47fc"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v0/agent/dupe_set/{id}/add_records": {
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "required": true
                }
            ],
            "post": {
                "summary": "Add records to Dupe Set",
                "operationId": "post-agent-dupe_set-id-add_records",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "description": "Add records to the dupe set",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "record_ids": {
                                        "type": "array",
                                        "description": "Array of record ids to add",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "required": [
                                    "record_ids"
                                ]
                            },
                            "examples": {
                                "Add records": {
                                    "value": {
                                        "record_ids": [
                                            "16d6da28-4af3-4a31-9a74-63ea18db47fc"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v0/agent/{id}/person_ranking": {
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "required": true
                }
            ],
            "get": {
                "summary": "Team Member Rankings",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "person_ranks": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "name": {
                                                        "type": "string"
                                                    },
                                                    "self": {
                                                        "type": "boolean"
                                                    },
                                                    "points": {
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "examples": {
                                    "Person Ranking ": {
                                        "value": {
                                            "person_ranks": [
                                                {
                                                    "name": "John Smith",
                                                    "points": 100,
                                                    "self": false
                                                },
                                                {
                                                    "name": "Jane Doe",
                                                    "points": 50,
                                                    "self": true
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "get-agent-id-person_ranking",
                "description": "Retrieve the rankings of people in the current users team"
            }
        },
        "/api/v0/agent/{id}/team_ranking": {
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "required": true
                }
            ],
            "get": {
                "summary": "Team Rankings",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "team_rankings": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "name": {
                                                        "type": "string"
                                                    },
                                                    "own_team": {
                                                        "type": "boolean"
                                                    },
                                                    "points": {
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "examples": {
                                    "Team Rankings": {
                                        "value": {
                                            "team_rankings": [
                                                {
                                                    "name": "SUNSHINE",
                                                    "points": 250,
                                                    "own_team": false
                                                },
                                                {
                                                    "name": "Tesma",
                                                    "points": 150,
                                                    "own_team": true
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "get-agent-id-team_ranking",
                "description": "Retrieve the rankings of all teams visible to the current user"
            }
        },
        "/api/v0/agent/{id}/resolved": {
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "required": true
                }
            ],
            "post": {
                "summary": "Resolved Dupe Sets Stats",
                "operationId": "post-agent-id-resolved",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "resolved_dupeSets": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "resolver": {
                                                        "type": "string"
                                                    },
                                                    "resolved": {
                                                        "type": "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "examples": {
                                    "Resolved dupe sets": {
                                        "value": {
                                            "resolved_dupeSets": [
                                                {
                                                    "resolver": "Automated tasks",
                                                    "resolved": 638
                                                },
                                                {
                                                    "resolver": "Sales Rep tasks",
                                                    "resolved": 1024
                                                },
                                                {
                                                    "resolver": "Admin tasks",
                                                    "resolved": 385
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Retrieve stats about resolved dupe sets for a given time range",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "start": {
                                        "type": "string",
                                        "description": "ISO 8601 encoded date time"
                                    },
                                    "end": {
                                        "type": "string",
                                        "description": "ISO 8601 encoded date time"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v0/agent/{id}/merged_dupe_sets": {
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "required": true
                }
            ],
            "post": {
                "summary": "Merged Dupe Sets",
                "operationId": "post-agent-id-merged_dupe_sets",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "fields": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SearchColumn"
                                            }
                                        },
                                        "dupeSets": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/MergedDupeSet"
                                            }
                                        }
                                    }
                                },
                                "examples": {
                                    "Merged dupe sets": {
                                        "value": {
                                            "fields": [
                                                {
                                                    "id": "170b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                    "name": "source",
                                                    "label": "Source"
                                                },
                                                {
                                                    "id": "170b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                    "name": "submitter",
                                                    "label": "Submitter"
                                                },
                                                {
                                                    "id": "170b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                    "name": "name",
                                                    "label": "Name"
                                                },
                                                {
                                                    "id": "170b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                    "name": "billingStreet",
                                                    "label": "Billing Street"
                                                },
                                                {
                                                    "id": "170b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                    "name": "leadSource",
                                                    "label": "Lead Source"
                                                },
                                                {
                                                    "id": "170b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                    "name": "billingState",
                                                    "label": "Billing State"
                                                }
                                            ],
                                            "dupeSets": [
                                                {
                                                    "submitter": "Admin",
                                                    "source": "Lead",
                                                    "name": "First Alarm",
                                                    "accountId": "123-123",
                                                    "mergeDate": "2020-10-09",
                                                    "billingStreet": "2335 N. Michigan Avenue",
                                                    "leadSource": "Morganville",
                                                    "billingState": "New York"
                                                },
                                                {
                                                    "submitter": "Admin",
                                                    "source": "Lead",
                                                    "name": "First Alarm",
                                                    "accountId": "123-321",
                                                    "mergeDate": "2020-10-09",
                                                    "billingStreet": "2335 N. Michigan Avenue",
                                                    "leadSource": "Morganville",
                                                    "billingState": "New York"
                                                },
                                                {
                                                    "submitter": "Admin",
                                                    "source": "Lead",
                                                    "name": "First Alarm",
                                                    "accountId": "123-400",
                                                    "mergeDate": "2020-10-09",
                                                    "billingStreet": "2335 N. Michigan Avenue",
                                                    "leadSource": "Morganville",
                                                    "billingState": "New York"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Retrieve merged dupe sets for the current user or the given date range",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "start": {
                                        "type": "string",
                                        "description": "ISO 8601 encoded date time"
                                    },
                                    "end": {
                                        "type": "string",
                                        "description": "ISO 8601 encoded date time"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v0/agent/{id}/user_configuration": {
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "required": true
                }
            ],
            "get": {
                "summary": "Get User Configuration",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "userConfiguration": {
                                            "$ref": "#/components/schemas/UserConfiguration"
                                        }
                                    }
                                },
                                "examples": {
                                    "User Configuration": {
                                        "value": {
                                            "userConfiguration": {
                                                "referFriends": "true,",
                                                "columnSizes": [
                                                    {
                                                        "column_id": "070b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                        "width": "300",
                                                        "sorting": "desc"
                                                    },
                                                    {
                                                        "column_id": "170b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                        "width": "200",
                                                        "sorting": "asc"
                                                    },
                                                    {
                                                        "column_id": "370b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                        "width": 210,
                                                        "sorting": "asc"
                                                    },
                                                    {
                                                        "column_id": "470b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                        "width": 143,
                                                        "sorting": "desc"
                                                    },
                                                    {
                                                        "column_id": "770b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                        "width": 191,
                                                        "sorting": "asc"
                                                    },
                                                    {
                                                        "column_id": "570b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                        "width": 109,
                                                        "sorting": "asc"
                                                    },
                                                    {
                                                        "column_id": "31da82be-6bc9-4417-ba1a-e70e05f645bc",
                                                        "width": 341,
                                                        "sorting": "desc"
                                                    },
                                                    {
                                                        "column_id": "670b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                        "width": 163,
                                                        "sorting": "none"
                                                    },
                                                    {
                                                        "column_id": "962a817e-9b2e-4fd6-ba8c-72c4df3578a1",
                                                        "width": 128,
                                                        "sorting": "desc"
                                                    },
                                                    {
                                                        "column_id": "21a3e634-1dcd-4aa9-a9cb-bc81bf343bf7",
                                                        "width": 118,
                                                        "sorting": "desc"
                                                    },
                                                    {
                                                        "column_id": "270b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                        "width": 149,
                                                        "sorting": "none"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "get-agent-id-user_configuration",
                "description": "Retrieve the configuration for the current user"
            },
            "post": {
                "summary": "Set User Configuration",
                "operationId": "post-agent-id-user_configuration",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "description": "Set the configuration for the current user",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "userConfiguration": {
                                        "$ref": "#/components/schemas/UserConfiguration"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v0/agent/{id}/my_dupesets": {
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "required": true
                }
            ],
            "post": {
                "summary": "My Dupesets",
                "operationId": "post-agent-id-my_dupesets",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "pending_dupesets": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/DupeSetInfo"
                                            }
                                        },
                                        "fields": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SearchColumn"
                                            },
                                            "description": "Fields in dupe set final record to display"
                                        }
                                    }
                                },
                                "examples": {
                                    "My Dupesets": {
                                        "value": {
                                            "fields": [
                                                {
                                                    "id": "170b5a68-81a6-4772-8831-73ba1e6ceb5d",
                                                    "name": "source",
                                                    "label": "Source"
                                                }
                                            ],
                                            "pending_dupeSets": []
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Fetch all dupesets assigned to the current user for the current week",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "start": {
                                        "type": "string",
                                        "description": "ISO 8601 encoded date time"
                                    },
                                    "end": {
                                        "type": "string",
                                        "description": "ISO 8601 encoded date time"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v0/agent/{id}/pending_dupesets": {
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "required": true
                }
            ],
            "post": {
                "summary": "Pending Dupesets",
                "operationId": "post-agent-id-pending_dupesets",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "fields": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SearchColumn"
                                            }
                                        },
                                        "pending_dupesets": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/DupeSetInfo"
                                            }
                                        }
                                    }
                                },
                                "examples": {
                                    "Pending Dupesets": {
                                        "value": {
                                            "fields": [{
                                                "id": "40000000-0000-0000-0000-000000000000",
                                                "name": "Id",
                                                "label": "Primary"
                                            }, {
                                                "id": "40000000-0000-0000-0000-000000000001",
                                                "name": "source",
                                                "label": "Source"
                                            }, {
                                                "id": "40000000-0000-0000-0000-000000000002",
                                                "name": "Name",
                                                "label": "Name"
                                            }, {
                                                "id": "40000000-0000-0000-0000-000000000003",
                                                "name": "BillingStreet",
                                                "label": "Billing Street"
                                            }, {
                                                "id": "40000000-0000-0000-0000-000000000004",
                                                "name": "RecordType.Name",
                                                "label": "Record Type"
                                            }, {
                                                "id": "40000000-0000-0000-0000-000000000005",
                                                "name": "BillingState",
                                                "label": "Billing State"
                                            }, {
                                                "id": "40000000-0000-0000-0000-000000000006",
                                                "name": "Description",
                                                "label": "Description"
                                            }, {
                                                "id": "40000000-0000-0000-0000-000000000007",
                                                "name": "Phone",
                                                "label": "Phone Number"
                                            }, {
                                                "id": "40000000-0000-0000-0000-000000000008",
                                                "name": "Tradestyle",
                                                "label": "Email"
                                            }, {
                                                "id": "40000000-0000-0000-0000-000000000009",
                                                "name": "Website",
                                                "label": "Website"
                                            }],
                                            "pending_dupesets": [{
                                                "id": "6334f157-9f18-4087-9eec-80af7cbabcce",
                                                "created": "2020-09-18T20:03:17.106160",
                                                "estimated_seconds_to_complete": 120,
                                                "owner_id": "94f33e7c-f932-11ea-867c-066d1d50b80a",
                                                "assignee_names": ["Joey Administia"],
                                                "bonus_points_countdown_seconds": 100,
                                                "final_record": {
                                                    "Name": "Colour Test",
                                                    "BillingStreet": "Test Billing",
                                                    "BillingState": "Alamo",
                                                    "Description": "",
                                                    "Tradestyle": "",
                                                    "Website": "",
                                                    "Restaurant_ID__c": "7400",
                                                    "Phone": "",
                                                    "CreatedDate": "2020-08-20T02:23:43Z",
                                                    "LastModifiedDate": "2020-08-20T02:23:43Z",
                                                    "OwnerId": "0053t000007KnOlAAK",
                                                    "RecordType.Name": "DoorDash Drive",
                                                    "Id": "0013t00001aZ1kjAAC"
                                                }
                                            }, {
                                                "id": "1dae05b6-2444-46a0-adaa-c3ed5b7d4b60",
                                                "created": "2020-09-18T20:03:26.717459",
                                                "estimated_seconds_to_complete": 120,
                                                "owner_id": "94f33e7c-f932-11ea-867c-066d1d50b80a",
                                                "assignee_names": ["Joey Administia"],
                                                "bonus_points_countdown_seconds": 100,
                                                "final_record": {
                                                    "Name": "Big Account Original",
                                                    "BillingStreet": "Illinois Street",
                                                    "BillingState": "NY0",
                                                    "Description": "Original - This is a Big Account. This account is used as duplicate for the CleanData. This account is used for testing purposes only. Please do not use this record.",
                                                    "Tradestyle": "",
                                                    "Website": "www.bigaccount-original.com",
                                                    "Restaurant_ID__c": "11111",
                                                    "Phone": "",
                                                    "CreatedDate": "2020-07-30T15:30:02Z",
                                                    "LastModifiedDate": "2020-08-01T15:01:19Z",
                                                    "OwnerId": "0053t000007KnOlAAK",
                                                    "RecordType.Name": "DoorDash Drive",
                                                    "Id": "0013t00001YKziqAAD"
                                                }
                                            }, {
                                                "id": "1643aa44-a08c-454c-89f8-a483ec17dbf4",
                                                "created": "2020-09-18T22:10:03.678617",
                                                "estimated_seconds_to_complete": 120,
                                                "owner_id": "94f33e7c-f932-11ea-867c-066d1d50b80a",
                                                "assignee_names": ["Joey Administia"],
                                                "bonus_points_countdown_seconds": 100,
                                                "final_record": {
                                                    "Name": "1st Alarm Co",
                                                    "BillingStreet": "103 market",
                                                    "BillingState": "",
                                                    "Description": "",
                                                    "Tradestyle": "",
                                                    "Website": "",
                                                    "Restaurant_ID__c": "34534423",
                                                    "Phone": "",
                                                    "CreatedDate": "2020-07-29T17:05:52Z",
                                                    "LastModifiedDate": "2020-07-29T17:05:52Z",
                                                    "OwnerId": "0053t000007KnOlAAK",
                                                    "RecordType.Name": "DoorDash Drive",
                                                    "Id": "0013t00001YIgnLAAT"
                                                }
                                            }, {
                                                "id": "316e470a-01a8-46c2-9398-9ae5fb32d4a4",
                                                "created": "2020-09-18T22:13:26.520077",
                                                "estimated_seconds_to_complete": 120,
                                                "owner_id": "94f33e7c-f932-11ea-867c-066d1d50b80a",
                                                "assignee_names": ["Joey Administia"],
                                                "bonus_points_countdown_seconds": 100,
                                                "final_record": {
                                                    "Name": "Nikolaus",
                                                    "BillingStreet": "oldnewdowntown",
                                                    "BillingState": "NJ",
                                                    "Description": "Olive",
                                                    "Tradestyle": "",
                                                    "Website": "www.Nikolaus.com",
                                                    "Restaurant_ID__c": "0001",
                                                    "Phone": "+1609-292-2102",
                                                    "CreatedDate": "2020-08-12T03:50:12Z",
                                                    "LastModifiedDate": "2020-08-12T03:56:31Z",
                                                    "OwnerId": "0053t000007KnOlAAK",
                                                    "RecordType.Name": "DoorDash Drive",
                                                    "Id": "0013t00001Xzw1TAAR"
                                                }
                                            }, {
                                                "id": "73ccd98e-4d64-4da3-9e72-bdbcb0bbc139",
                                                "created": "2020-09-19T04:29:56.225209",
                                                "estimated_seconds_to_complete": 120,
                                                "owner_id": "94f33e7c-f932-11ea-867c-066d1d50b80a",
                                                "assignee_names": ["Joey Administia"],
                                                "bonus_points_countdown_seconds": 100,
                                                "final_record": {
                                                    "Name": "HP",
                                                    "BillingStreet": "foresta",
                                                    "BillingState": "",
                                                    "Description": "",
                                                    "Tradestyle": "",
                                                    "Website": "www.hp.com",
                                                    "Restaurant_ID__c": "009",
                                                    "Phone": "",
                                                    "CreatedDate": "2020-08-24T11:02:00Z",
                                                    "LastModifiedDate": "2020-08-28T07:14:08Z",
                                                    "OwnerId": "0053t000007KnOlAAK",
                                                    "RecordType.Name": "DoorDash Drive",
                                                    "Id": "0013t00001b9YxpAAE"
                                                }
                                            }, {
                                                "id": "b58b946e-f023-487d-9906-41a154e1a8f4",
                                                "created": "2020-09-21T22:27:39.254209",
                                                "estimated_seconds_to_complete": 120,
                                                "owner_id": "94f33e7c-f932-11ea-867c-066d1d50b80a",
                                                "assignee_names": ["Joey Administia"],
                                                "bonus_points_countdown_seconds": 100,
                                                "final_record": {
                                                    "Name": "Dickenson plc",
                                                    "BillingStreet": "1301 Hoch Drive",
                                                    "BillingState": "KS",
                                                    "Description": "",
                                                    "Tradestyle": "",
                                                    "Website": "dickenson-consulting.com",
                                                    "Restaurant_ID__c": "",
                                                    "Phone": "(785) 241-6200",
                                                    "CreatedDate": "2020-07-20T17:23:04Z",
                                                    "LastModifiedDate": "2020-07-20T17:23:04Z",
                                                    "OwnerId": "0053t000007KnOlAAK",
                                                    "RecordType.Name": "",
                                                    "Id": "0013t00001XKLooAAH"
                                                }
                                            }, {
                                                "id": "15724e56-ff38-47f1-ae02-1206174e04f8",
                                                "created": "2020-09-21T23:54:25.844000",
                                                "estimated_seconds_to_complete": 120,
                                                "owner_id": "94f33e7c-f932-11ea-867c-066d1d50b80a",
                                                "assignee_names": ["Joey Administia"],
                                                "bonus_points_countdown_seconds": 100,
                                                "final_record": {
                                                    "Name": "coca cola inc",
                                                    "BillingStreet": "Reutestrasse",
                                                    "BillingState": "BW",
                                                    "Description": "I am a description",
                                                    "Tradestyle": "",
                                                    "Website": "lala.com",
                                                    "Restaurant_ID__c": "0098",
                                                    "Phone": "",
                                                    "CreatedDate": "2020-07-28T09:45:21Z",
                                                    "LastModifiedDate": "2020-08-07T20:38:27Z",
                                                    "OwnerId": "0053t000007KnOlAAK",
                                                    "RecordType.Name": "DoorDash Drive",
                                                    "Id": "0013t00001XaoiBAAR"
                                                }
                                            }]
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Retrieve set of pending dupe sets awaiting admin approval",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "start": {
                                        "type": "string",
                                        "description": "ISO 8601 encoded date time"
                                    },
                                    "end": {
                                        "type": "string",
                                        "description": "ISO 8601 encoded date time"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v0/agent/{id}/duplicate_objects": {
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "required": true
                }
            ],
            "post": {
                "summary": "",
                "operationId": "post-agent-id-duplicate_records",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "objects": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "name": {
                                                        "type": "string"
                                                    },
                                                    "groups": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "object",
                                                            "properties": {
                                                                "name": {
                                                                    "type": "string"
                                                                },
                                                                "count": {
                                                                    "type": "string"
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "examples": {
                                    "Duplicate Objects": {
                                        "value": {
                                            "objects": [
                                                {
                                                    "name": "Accounts",
                                                    "groups": [
                                                        {
                                                            "name": "",
                                                            "count": 500
                                                        },
                                                        {
                                                            "name": "",
                                                            "count": 300
                                                        }
                                                    ]
                                                },
                                                {
                                                    "name": "Leads",
                                                    "groups": [
                                                        {
                                                            "name": "",
                                                            "count": 550
                                                        }
                                                    ]
                                                },
                                                {
                                                    "name": "Contacts",
                                                    "groups": [
                                                        {
                                                            "name": "",
                                                            "count": 400
                                                        }
                                                    ]
                                                },
                                                {
                                                    "name": "Opportunities",
                                                    "groups": [
                                                        {
                                                            "name": "",
                                                            "count": 600
                                                        },
                                                        {
                                                            "name": "",
                                                            "count": 200
                                                        },
                                                        {
                                                            "name": "",
                                                            "count": 410
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "start": {
                                        "type": "string",
                                        "description": "ISO 8601 encoded date time"
                                    },
                                    "end": {
                                        "type": "string",
                                        "description": "ISO 8601 encoded date time"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Retrieve counts of records objects that are part of open dupe sets"
            }
        },
        "/api/v0/agent/{id}/duplicates_by_usertype": {
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "required": true
                }
            ],
            "post": {
                "summary": "",
                "operationId": "post-agent-id-duplicates_by_usertype",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "user_types": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "name": {
                                                        "type": "string"
                                                    },
                                                    "groups": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "object",
                                                            "properties": {
                                                                "name": {
                                                                    "type": "string"
                                                                },
                                                                "count": {
                                                                    "type": "string"
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "examples": {
                                    "Duplicate Objects": {
                                        "value": {
                                            "objects": [
                                                {
                                                    "name": "User Type 1",
                                                    "groups": [
                                                        {
                                                            "name": "",
                                                            "count": 500
                                                        },
                                                        {
                                                            "name": "",
                                                            "count": 300
                                                        },
                                                        {
                                                            "name": "",
                                                            "count": 400
                                                        },
                                                        {
                                                            "name": "",
                                                            "count": 100
                                                        }
                                                    ]
                                                },
                                                {
                                                    "name": "User Type 2",
                                                    "groups": [
                                                        {
                                                            "name": "",
                                                            "count": 550
                                                        }
                                                    ]
                                                },
                                                {
                                                    "name": "User Type 3",
                                                    "groups": [
                                                        {
                                                            "name": "",
                                                            "count": 400
                                                        }
                                                    ]
                                                },
                                                {
                                                    "name": "User Type 4",
                                                    "groups": [
                                                        {
                                                            "name": "",
                                                            "count": 600
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "start": {
                                        "type": "string",
                                        "description": "ISO 8601 encoded date time"
                                    },
                                    "end": {
                                        "type": "string",
                                        "description": "ISO 8601 encoded date time"
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Retrieve counts of dupe sets assigned to each type of users"
            }
        },
        "/api/v0/agent/{id}/excluded_records": {
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "required": true
                }
            ],
            "post": {
                "summary": "",
                "operationId": "post-agent-id-excluded_records",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "fields": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SearchColumn"
                                            }
                                        },
                                        "records": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "description": "Object containing values for fields",
                                                "properties": {
                                                    "": {
                                                        "type": "string"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "examples": {
                                    "Pending Dupesets": {
                                        "value": {
                                            "fields": [
                                                {
                                                    "id": "170b5a68-81a6-4772-8831-73ba1e6ceb1d",
                                                    "name": "source",
                                                    "label": "Source"
                                                },
                                                {
                                                    "id": "170b5a68-81a6-4772-8831-73ba1e6ceb2d",
                                                    "name": "origin",
                                                    "label": "Origin"
                                                },
                                                {
                                                    "id": "170b5a68-81a6-4772-8831-73ba1e6ceb4d",
                                                    "name": "name",
                                                    "label": "Name"
                                                },
                                                {
                                                    "id": "170b5a68-81a6-4772-8831-73ba1e6ceb7d",
                                                    "name": "street",
                                                    "label": "Billing Street"
                                                }
                                            ],
                                            "records": [
                                                {
                                                    "required_time": 20,
                                                    "source": "Lead",
                                                    "origin": "Marketing",
                                                    "cause": "Merge Failed",
                                                    "name": "Dream Folks",
                                                    "street": "2335 N. Michigan Avenue"
                                                },
                                                {
                                                    "required_time": 20,
                                                    "source": "Account",
                                                    "origin": "Rep",
                                                    "cause": "By Sales Rep",
                                                    "name": "Johnson & Co",
                                                    "street": "2335 Michigan Avenue"
                                                },
                                                {
                                                    "required_time": 30,
                                                    "source": "Account",
                                                    "origin": "Marketing",
                                                    "cause": "Automatic",
                                                    "name": "MicroFirst",
                                                    "street": "2335 N. Michigan Avenue"
                                                },
                                                {
                                                    "required_time": 30,
                                                    "source": "Lead",
                                                    "origin": "Merchant Reg.",
                                                    "cause": "By Sales Rep",
                                                    "name": "First Alarm",
                                                    "street": "2335 N. Michigan Avenue"
                                                },
                                                {
                                                    "required_time": 30,
                                                    "source": "Lead",
                                                    "origin": "Web Form",
                                                    "cause": "Automatic",
                                                    "name": "Dream Folks",
                                                    "street": "2335 Michigan Avenue"
                                                },
                                                {
                                                    "required_time": 30,
                                                    "source": "Account",
                                                    "origin": "Web Form",
                                                    "cause": "Automatic",
                                                    "name": "Johnson & Co",
                                                    "street": "2335 N. Michigan Avenue"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Retrieve records which have been marked as never merge",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "start": {
                                        "type": "string",
                                        "description": "ISO 8601 encoded date time"
                                    },
                                    "end": {
                                        "type": "string",
                                        "description": "ISO 8601 encoded date time"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v0/auth/registrations/{id}": {
            "get": {
                "summary": "Get Registration by ID",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Registration"
                                },
                                "examples": {
                                    "Registration": {
                                        "value": {
                                            "id": "0deaa4cb-afcf-4a00-8570-b246f706c04d",
                                            "object": "registration",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00",
                                            "email": "dev@activeprime.com",
                                            "from_url": "https://activeprime.dev",
                                            "from_ip": "127.0.0.1",
                                            "start_datetime": "2020-11-13T20:20:39+00:00",
                                            "end_datetime": "2020-11-20T20:20:39+00:00",
                                            "is_used": false,
                                            "account_id": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5"
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Retrieve a Registration.",
                "parameters": [],
                "operationId": "getRegistrationById",
                "security": [
                    {
                        "JWT": []
                    }
                ]
            },
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "description": "uuid",
                    "required": true
                }
            ],
            "delete": {
                "summary": "Delete Registration",
                "responses": {
                    "200": {
                        "description": "Deletion was successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                },
                                "examples": {}
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Delete the Registration.",
                "operationId": "deleteRegistration"
            },
            "post": {
                "summary": "Update Registration",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Registration"
                                },
                                "examples": {
                                    "Updated Registration Example Response": {
                                        "value": {
                                            "id": "0deaa4cb-afcf-4a00-8570-b246f706c04d",
                                            "object": "registration",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00",
                                            "email": "dev@activeprime.com",
                                            "from_url": "https://activeprime.dev",
                                            "from_ip": "127.0.0.1",
                                            "start_datetime": "2020-11-13T20:20:39+00:00",
                                            "end_datetime": "2020-11-20T20:20:39+00:00",
                                            "is_used": true,
                                            "account_id": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5"
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Update the Registration.",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Registration"
                            },
                            "examples": {
                                "Update Registration Example": {
                                    "value": {
                                        "object": "registration",
                                        "is_used": true
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [],
                "operationId": "updateRegistration"
            }
        },
        "/api/v0/auth/registrations/": {
            "get": {
                "summary": "Get Users",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "object": {
                                            "type": "string",
                                            "enum": [
                                                "list"
                                            ],
                                            "example": "list",
                                            "pattern": "list"
                                        },
                                        "item_type": {
                                            "type": "string",
                                            "description": "The type of objects stored in the list",
                                            "enum": [
                                                "registration"
                                            ],
                                            "example": "registration",
                                            "pattern": "registration"
                                        },
                                        "has_more": {
                                            "type": "boolean",
                                            "example": "false"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Registration"
                                            }
                                        }
                                    },
                                    "required": [
                                        "object",
                                        "item_type",
                                        "has_more",
                                        "data"
                                    ]
                                },
                                "examples": {
                                    "All Registrations Example Response": {
                                        "value": {
                                            "object": "list",
                                            "item_type": "registration",
                                            "has_more": false,
                                            "data": [
                                                {
                                                    "id": "0deaa4cb-afcf-4a00-8570-b246f706c04d",
                                                    "object": "registration",
                                                    "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                                    "created": "2018-11-13T20:20:39+00:00",
                                                    "modifed": "2018-11-13T20:20:39+00:00",
                                                    "email": "dev@activeprime.com",
                                                    "from_url": "https://activeprime.dev",
                                                    "from_ip": "127.0.0.1",
                                                    "start_datetime": "2020-11-13T20:20:39+00:00",
                                                    "end_datetime": "2020-11-20T20:20:39+00:00",
                                                    "is_used": false,
                                                    "account_id": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "List Registrations",
                "parameters": [],
                "operationId": "getRegistrations"
            },
            "post": {
                "summary": "Create a Registration",
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Registration"
                                },
                                "examples": {
                                    "Created Registration Example Response": {
                                        "value": {
                                            "id": "0deaa4cb-afcf-4a00-8570-b246f706c04d",
                                            "object": "registration",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00",
                                            "email": "dev@activeprime.com",
                                            "from_url": "https://activeprime.dev",
                                            "from_ip": "127.0.0.1",
                                            "start_datetime": "2020-11-13T20:20:39+00:00",
                                            "end_datetime": "2020-11-20T20:20:39+00:00",
                                            "is_used": false,
                                            "account_id": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5"
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Create a Registration.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Registration"
                            },
                            "examples": {
                                "Create a Registration": {
                                    "value": {
                                        "object": "registration",
                                        "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                        "created": "2018-11-13T20:20:39+00:00",
                                        "modifed": "2018-11-13T20:20:39+00:00",
                                        "email": "dev@activeprime.com",
                                        "from_url": "https://activeprime.dev",
                                        "from_ip": "127.0.0.1",
                                        "start_datetime": "2020-11-13T20:20:39+00:00",
                                        "end_datetime": "2020-11-20T20:20:39+00:00",
                                        "is_used": false,
                                        "account_id": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5"
                                    }
                                }
                            }
                        }
                    },
                    "description": ""
                },
                "operationId": "createRegistration"
            },
            "parameters": []
        },
        "/api/v0/auth/start_account_signup": {
            "post": {
                "summary": "Signup for a CleanData account",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "Signup Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "email": {
                                            "type": "string",
                                            "format": "email",
                                            "example": "dev@activeprime.com"
                                        },
                                        "registration_id": {
                                            "type": "string",
                                            "format": "uuid",
                                            "example": "0deaa4cb-afcf-4a00-8570-b246f706c04d"
                                        }
                                    },
                                    "required": [
                                        "email",
                                        "registration_id"
                                    ]
                                },
                                "examples": {
                                    "Example Start Account Signup Response": {
                                        "value": {
                                            "email": "dev@activeprime.com",
                                            "registration_id": "0deaa4cb-afcf-4a00-8570-b246f706c04d"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "operationId": "startAccountSignUp",
                "description": "Sign up for a CleanData account; the first step in a new customer signing up for CleanData. The only input is an email. CleanData sends a registration link to the email where the user can continue with the process of registering their company and the first user for the CleanData service.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "dev@activeprime.com"
                                    }
                                },
                                "required": [
                                    "email"
                                ]
                            },
                            "examples": {
                                "Example Start Account Signup Request": {
                                    "value": {
                                        "email": "dev@activeprime.com"
                                    }
                                }
                            }
                        }
                    },
                    "description": ""
                }
            },
            "parameters": []
        },
        "/api/v0/auth/finish_account_signup": {
            "post": {
                "summary": "Register a new Account and User",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "Registration Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "jwt": {
                                            "type": "string",
                                            "example": "xxxx.yyyyy.zzzzzz"
                                        },
                                        "status": {
                                            "type": "string",
                                            "format": "uuid",
                                            "example": "0deaa4cb-afcf-4a00-8570-b246f706c04d",
                                            "pattern": "success"
                                        },
                                        "error": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "jwt",
                                        "status",
                                        "error"
                                    ]
                                },
                                "examples": {
                                    "Finish Account Signup Example Response": {
                                        "value": {
                                            "jwt": "xxxx.yyyy.zzzz",
                                            "status": "success",
                                            "error": ""
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    },
                    "": {
                        "description": "Reister Account and User Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {}
                                },
                                "examples": {
                                    "example-1": {}
                                }
                            }
                        }
                    }
                },
                "operationId": "finishAccountSignUp",
                "description": "After a user submits their email via the CleanData signup URL, an email is sent with a link to the CleanData registration URL. The user then provides their phone, company name and first and last name. An Account with one assodiated User is then created. CleanData can now be accessed by the user.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "dev@activeprime.com"
                                    },
                                    "phone": {
                                        "type": "string",
                                        "example": "617-555-1212"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "SuperStrongAmI7&"
                                    },
                                    "company_name": {
                                        "type": "string",
                                        "example": "ActiveWidget"
                                    },
                                    "first_name": {
                                        "type": "string",
                                        "example": "Joe"
                                    },
                                    "last_name": {
                                        "type": "string",
                                        "example": "Johnson"
                                    }
                                },
                                "required": [
                                    "email",
                                    "phone",
                                    "password",
                                    "company_name",
                                    "first_name",
                                    "last_name"
                                ]
                            },
                            "examples": {
                                "Example Finish Account Signup  Request": {
                                    "value": {
                                        "email": "dev@activeprime.com",
                                        "phone": "617-555-1212",
                                        "password": "SuperStrongAmI7&",
                                        "company_name": "ActiveWidget",
                                        "first_name": "Joe",
                                        "last_name": "Johnson"
                                    }
                                }
                            }
                        }
                    },
                    "description": "Register Account and User Request"
                }
            },
            "parameters": []
        },
        "/api/v0/auth/sign_in": {
            "post": {
                "summary": "Sign into a CleanData account",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "Signin Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "jwt": {
                                            "type": "string",
                                            "example": "xxxx.yyyy.zzzz"
                                        },
                                        "status": {
                                            "type": "string"
                                        },
                                        "error": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "jwt",
                                        "status",
                                        "error"
                                    ]
                                },
                                "examples": {
                                    "Signin Example Response": {
                                        "value": {
                                            "jwt": "xxxx.yyyy.zzzz",
                                            "status": "success",
                                            "error": ""
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "operationId": "signIn",
                "description": "Signin will sign (log) the user into the CleanData system.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "username": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "dev@activeprime.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "SuperStrongAmI7&"
                                    }
                                },
                                "required": [
                                    "username",
                                    "password"
                                ]
                            },
                            "examples": {
                                "Example Signin Request": {
                                    "value": {
                                        "username": "dev@activeprime.com",
                                        "password": "SuperStrongAmI7&"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "parameters": []
        },
        "/api/v0/auth/start_adding_user": {
            "post": {
                "summary": "Begin the two step process of adding a new user to CleanData",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "adduser Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "email": {
                                            "type": "string",
                                            "format": "email",
                                            "example": "dev@activeprime.com"
                                        },
                                        "registration_id": {
                                            "type": "string",
                                            "format": "uuid",
                                            "example": "0deaa4cb-afcf-4a00-8570-b246f706c04d"
                                        }
                                    },
                                    "required": [
                                        "email",
                                        "registration_id"
                                    ]
                                },
                                "examples": {
                                    "Example Start Adding User Response": {
                                        "value": {
                                            "email": "dev@activeprime.com",
                                            "registration_id": "0deaa4cb-afcf-4a00-8570-b246f706c04d"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "operationId": "startAddingUser",
                "description": "First step of adding a new user to a CleanData account. An email is sent to the user's email. When the user follows that second step, the finish adding user step is peformed, adding the actual user record to the CleanData account.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "dev@activeprime.com",
                                        "description": "The email of the new user."
                                    }
                                },
                                "required": [
                                    "email"
                                ]
                            },
                            "examples": {
                                "Example Start Adding User Request": {
                                    "value": {
                                        "email": "dev@activeprime.com"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "parameters": []
        },
        "/api/v0/auth/finish_adding_user": {
            "post": {
                "summary": "Register a new User",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "Registration Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "jwt": {
                                            "type": "string",
                                            "example": "xxxx.yyyyy.zzzzzz"
                                        },
                                        "status": {
                                            "type": "string",
                                            "format": "uuid",
                                            "example": "0deaa4cb-afcf-4a00-8570-b246f706c04d",
                                            "pattern": "success"
                                        },
                                        "error": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "jwt",
                                        "status",
                                        "error"
                                    ]
                                },
                                "examples": {
                                    "Example Finish Adding User Response": {
                                        "value": {
                                            "jwt": "xxxx.yyyy.zzzz",
                                            "status": "success",
                                            "error": ""
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    },
                    "": {
                        "description": "Reister Account and User Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {}
                                },
                                "examples": {
                                    "example-1": {}
                                }
                            }
                        }
                    }
                },
                "operationId": "finishAddingUser",
                "description": "Second step of adding a new user to a CleanData account. After the start adding user step finishes the user who received the email clicks on a link which allows them to then finish adding themselves as a user, providing first name, last name, etc.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "registration_id": {
                                        "type": "string",
                                        "format": "uuid",
                                        "example": "0deaa4cb-afcf-4a00-8570-b246f706c04d"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "SuperStrongAmI7&"
                                    },
                                    "first_name": {
                                        "type": "string",
                                        "example": "Joe"
                                    },
                                    "last_name": {
                                        "type": "string",
                                        "example": "Johnson"
                                    }
                                },
                                "required": [
                                    "registration_id",
                                    "password",
                                    "first_name",
                                    "last_name"
                                ]
                            },
                            "examples": {
                                "Example Finish Adding User Request": {
                                    "value": {
                                        "registration_id": "0deaa4cb-afcf-4a00-8570-b246f706c04d",
                                        "email": "dev@activeprime.com",
                                        "password": "SuperStrongAmI7&",
                                        "first_name": "Joe",
                                        "last_name": "Johnson"
                                    }
                                }
                            }
                        }
                    },
                    "description": "Register Account and User Request"
                }
            },
            "parameters": []
        },
        "/api/v0/auth/auth_via_sfdc": {
            "post": {
                "summary": "Sign in (authorization) via a Salesforce session.",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "Signin Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "jwt": {
                                            "type": "string",
                                            "example": "xxxx.yyyy.zzzz"
                                        },
                                        "status": {
                                            "type": "string"
                                        },
                                        "error": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "jwt",
                                        "status",
                                        "error"
                                    ]
                                },
                                "examples": {
                                    "Auth Example Response": {
                                        "value": {
                                            "jwt": "xxxx.yyyy.zzzz",
                                            "status": "success",
                                            "error": ""
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "operationId": "auth_via_sfdc",
                "description": "Sign in (authorization) via a Salesforce session, using the session_id and user_id.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "session_id": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "dev@activeprime.com"
                                    },
                                    "user_id": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "SuperStrongAmI7&"
                                    }
                                },
                                "required": [
                                    "session_id",
                                    "user_id"
                                ]
                            },
                            "examples": {
                                "Example Auth Request": {
                                    "value": {
                                        "user_id": "0056g000001wj4JAAQ",
                                        "session_id": "14g54000001wj4JAAQ"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "parameters": []
        },
        "/api/v0/connection/{id}/get_access_token": {
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "description": "uuid",
                    "required": true
                }
            ],
            "post": {
                "summary": "Get Access Token",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "access_token": {
                                            "type": "string",
                                            "description": "A valid access_token that the client can use with this connection."
                                        }
                                    },
                                    "required": [
                                        "access_token"
                                    ]
                                },
                                "examples": {
                                    "Valid Access Token": {
                                        "value": {
                                            "access_token": "456xyz"
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Get a valid access_token for the connection.",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "access_token": {
                                        "type": "string",
                                        "description": "The access_token that was used previously by the client. If the auth services finds that this access_token is still valid, then the access_token is reused (returned)."
                                    }
                                }
                            },
                            "examples": {
                                "Get Access Token": {
                                    "value": {
                                        "access_token": "123abc"
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [],
                "operationId": "connectionGetAccessToken"
            }
        },
        "/api/v0/datasystem/connections/": {
            "get": {
                "summary": "Get Connections",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "object": {
                                            "type": "string",
                                            "enum": [
                                                "list"
                                            ],
                                            "example": "list",
                                            "pattern": "list"
                                        },
                                        "item_type": {
                                            "type": "string",
                                            "description": "The type of objects stored in the list",
                                            "enum": [
                                                "connection"
                                            ],
                                            "example": "connection",
                                            "pattern": "connection"
                                        },
                                        "has_more": {
                                            "type": "boolean",
                                            "example": "false"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Connection"
                                            }
                                        }
                                    },
                                    "required": [
                                        "object",
                                        "item_type",
                                        "has_more",
                                        "data"
                                    ]
                                },
                                "examples": {
                                    "All Connections": {
                                        "value": {
                                            "object": "list",
                                            "item_type": "connection",
                                            "has_more": false,
                                            "data": [
                                                {
                                                    "id": "9b40c303-4fce-4482-89a3-6df6a1eea6df",
                                                    "object": "connection",
                                                    "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                                    "created": "2018-11-13T20:20:39+00:00",
                                                    "modifed": "2018-11-13T20:20:39+00:00",
                                                    "account_id": "d463677e-2060-4db0-8985-35585a8bc90c",
                                                    "description": "The production instance of Salesforce",
                                                    "name": "SF Production",
                                                    "system_type": "sfdc",
                                                    "auth_type": "oauth2",
                                                    "auth_params": "{'flows' :['see openapi3 oauth2 docs for flows']}"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Get Connections",
                "parameters": [],
                "operationId": "getConnections"
            },
            "post": {
                "summary": "Create Connection",
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Connection"
                                },
                                "examples": {
                                    "Created Connection": {
                                        "value": {
                                            "id": "9b40c303-4fce-4482-89a3-6df6a1eea6df",
                                            "object": "connection",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00",
                                            "account_id": "d463677e-2060-4db0-8985-35585a8bc90c",
                                            "description": "The production instance of Salesforce",
                                            "name": "SF Production",
                                            "system_type": "sfdc",
                                            "auth_type": "oauth2",
                                            "auth_params": "{'flows' :['see openapi3 oauth2 docs for flows']}"
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Create a Connection.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConnectionCreate"
                            },
                            "examples": {
                                "Create a Connection": {
                                    "value": {
                                        "description": "The production instance of Salesforce",
                                        "name": "SF Production",
                                        "system_type": "sfdc",
                                        "auth_type": "oauth2",
                                        "auth_params": "{'flows' :['see openapi3 oauth2 docs for flows']}"
                                    }
                                }
                            }
                        }
                    },
                    "description": ""
                },
                "operationId": "createConnection"
            },
            "parameters": []
        },
        "/api/v0/datasystem/connections/{id}": {
            "get": {
                "summary": "Get Connection by ID",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Connection"
                                },
                                "examples": {
                                    "Connection": {
                                        "value": {
                                            "id": "9b40c303-4fce-4482-89a3-6df6a1eea6df",
                                            "object": "connection",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00",
                                            "account_id": "d463677e-2060-4db0-8985-35585a8bc90c",
                                            "description": "The production instance of Salesforce",
                                            "name": "SF Production",
                                            "system_type": "sfdc",
                                            "auth_type": "oauth2",
                                            "auth_params": "{'flows' :['see openapi3 oauth2 docs for flows']}"
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Retrieve a Connection.",
                "parameters": [],
                "operationId": "getConnectionById"
            },
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "description": "uuid",
                    "required": true
                }
            ],
            "delete": {
                "summary": "Delete Connection",
                "responses": {
                    "200": {
                        "description": "Deletion was successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                },
                                "examples": {}
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Delete the Connection",
                "operationId": "deleteConnection"
            },
            "post": {
                "summary": "Update Connection",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Connection"
                                },
                                "examples": {
                                    "Updated Connection": {
                                        "value": {
                                            "id": "9b40c303-4fce-4482-89a3-6df6a1eea6df",
                                            "object": "connection",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00",
                                            "account_id": "d463677e-2060-4db0-8985-35585a8bc90c",
                                            "description": "The production instance of Salesforce",
                                            "name": "SF Production",
                                            "system_type": "sfdc",
                                            "auth_type": "oauth2",
                                            "auth_params": "{'flows' :['see openapi3 oauth2 docs for flows']}"
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Update a Connection.",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConnectionCreate"
                            },
                            "examples": {
                                "Update Connection": {
                                    "value": {
                                        "description": "The production instance of Salesforce",
                                        "name": "SF Production"
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [],
                "operationId": "updateConnection"
            }
        },
        "/api/v0/datasystem/connections/{id}/verify": {
            "post": {
                "summary": "Verify a connection can connect",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "example": "9b40c303-4fce-4482-89a3-6df6a1eea6df"
                                        },
                                        "object": {
                                            "type": "string",
                                            "example": "connection",
                                            "pattern": "connection"
                                        },
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "error": {
                                            "type": "string",
                                            "example": "failure"
                                        }
                                    },
                                    "required": [
                                        "id",
                                        "object",
                                        "status",
                                        "error"
                                    ]
                                },
                                "examples": {
                                    "Verify Connection": {
                                        "value": {
                                            "id": "9b40c303-4fce-4482-89a3-6df6a1eea6df",
                                            "object": "connection",
                                            "status": "success",
                                            "error": ""
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Verify a connecton can connect",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object"
                            },
                            "examples": {
                                "Verify Connection": {
                                    "value": {}
                                }
                            }
                        }
                    }
                },
                "parameters": [],
                "operationId": "verifyConnection"
            }
        },
        "/api/v0/datasystem/crawlers/{id}": {
            "get": {
                "summary": "Get Crawler by ID",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Crawler"
                                },
                                "examples": {
                                    "Crawler": {
                                        "value": {
                                            "id": "9eea810f-1fb5-4837-81b8-85425b80d133",
                                            "object": "crawler",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00",
                                            "account_id": "d463677e-2060-4db0-8985-35585a8bc90c",
                                            "connection_id": "9b40c303-4fce-4482-89a3-6df6a1eea6df",
                                            "run_state": "stopped",
                                            "crawl_state": "waiting",
                                            "purger_enabled": true,
                                            "state_history": [
                                                {
                                                    "run_state": "started",
                                                    "crawl_state": "crawling"
                                                }
                                            ],
                                            "loader_period": 300
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Retrieve a Crawler.",
                "parameters": [],
                "operationId": "getCrawlerById"
            },
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "description": "uuid",
                    "required": true
                }
            ],
            "delete": {
                "summary": "Delete Crawler",
                "responses": {
                    "200": {
                        "description": "Deletion was successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                },
                                "examples": {}
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Delete the Crawler",
                "operationId": "deleteCrawler"
            },
            "post": {
                "summary": "Update Crawler",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Crawler"
                                },
                                "examples": {
                                    "Updated Crawler": {
                                        "value": {
                                            "id": "9eea810f-1fb5-4837-81b8-85425b80d133",
                                            "object": "crawler",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00",
                                            "account_id": "d463677e-2060-4db0-8985-35585a8bc90c",
                                            "connection_id": "9b40c303-4fce-4482-89a3-6df6a1eea6df",
                                            "run_state": "stopped",
                                            "crawl_state": "waiting",
                                            "purger_enabled": true,
                                            "state_history": [
                                                {
                                                    "run_state": "started",
                                                    "crawl_state": "crawling"
                                                }
                                            ],
                                            "loader_period": 300
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Update a Crawler.",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CrawlerUpsert"
                            },
                            "examples": {
                                "Update Crawler": {
                                    "value": {
                                        "connection_id": "9b40c303-4fce-4482-89a3-6df6a1eea6df",
                                        "loader_period": 20
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [],
                "operationId": "updateCrawler"
            }
        },
        "/api/v0/datasystem/crawlers/": {
            "get": {
                "summary": "Get Crawlers",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "object": {
                                            "type": "string",
                                            "enum": [
                                                "list"
                                            ],
                                            "example": "list",
                                            "pattern": "list"
                                        },
                                        "item_type": {
                                            "type": "string",
                                            "description": "The type of objects stored in the list",
                                            "enum": [
                                                "crawler"
                                            ],
                                            "example": "crawler",
                                            "pattern": "crawler"
                                        },
                                        "has_more": {
                                            "type": "boolean",
                                            "example": "false"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Crawler"
                                            }
                                        }
                                    },
                                    "required": [
                                        "object",
                                        "item_type",
                                        "has_more",
                                        "data"
                                    ]
                                },
                                "examples": {
                                    "All Crawlers": {
                                        "value": {
                                            "object": "list",
                                            "item_type": "crawler",
                                            "has_more": false,
                                            "data": [
                                                {
                                                    "id": "9eea810f-1fb5-4837-81b8-85425b80d133",
                                                    "object": "crawler",
                                                    "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                                    "created": "2018-11-13T20:20:39+00:00",
                                                    "modifed": "2018-11-13T20:20:39+00:00",
                                                    "account_id": "d463677e-2060-4db0-8985-35585a8bc90c",
                                                    "connection_id": "9b40c303-4fce-4482-89a3-6df6a1eea6df",
                                                    "run_state": "stopped",
                                                    "crawl_state": "waiting",
                                                    "purger_enabled": true,
                                                    "state_history": [
                                                        {
                                                            "run_state": "started",
                                                            "crawl_state": "crawling"
                                                        }
                                                    ],
                                                    "loader_period": 300
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Get Crawlers",
                "parameters": [],
                "operationId": "getCrawlers"
            },
            "post": {
                "summary": "Create Crawler",
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Crawler"
                                },
                                "examples": {
                                    "Created Crawler": {
                                        "value": {
                                            "id": "9eea810f-1fb5-4837-81b8-85425b80d133",
                                            "object": "crawler",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00",
                                            "account_id": "d463677e-2060-4db0-8985-35585a8bc90c",
                                            "connection_id": "9b40c303-4fce-4482-89a3-6df6a1eea6df",
                                            "run_state": "created",
                                            "crawl_state": "waiting",
                                            "purger_enabled": true,
                                            "state_history": [],
                                            "loader_period": 300
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Create a Crawler.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CrawlerUpsert"
                            },
                            "examples": {
                                "Create a Crawler": {
                                    "value": {
                                        "connection_id": "9b40c303-4fce-4482-89a3-6df6a1eea6df",
                                        "loader_period": 20,
                                        "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                        "account_id": "d463677e-2060-4db0-8985-35585a8bc90c",
                                        "entity_schemas": [
                                            {
                                                "blocking_filter": null,
                                                "entity": "Contact",
                                                "fields": [
                                                    "first",
                                                    "last",
                                                    "id"
                                                ],
                                                "index_fields": [
                                                    "first",
                                                    "last",
                                                    "id"
                                                ],
                                                "key": "id",
                                                "parent": null
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "description": ""
                },
                "operationId": "createCrawler"
            },
            "parameters": []
        },
        "/api/v0/datasystem/crawler/{id}/signal": {
            "post": {
                "summary": "Send a signal to the crawler",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "example": "9b40c303-4fce-4482-89a3-6df6a1eea6df"
                                        },
                                        "object": {
                                            "type": "string",
                                            "enum": [
                                                "crawler"
                                            ],
                                            "example": "crawler",
                                            "pattern": "crawler"
                                        },
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "error": {
                                            "type": "string",
                                            "example": "failure"
                                        }
                                    },
                                    "required": [
                                        "id",
                                        "object",
                                        "status",
                                        "error"
                                    ]
                                },
                                "examples": {
                                    "Crawler signal response": {
                                        "value": {
                                            "id": "9eea810f-1fb5-4837-81b8-85425b80d133",
                                            "object": "crawler",
                                            "status": "success",
                                            "error": ""
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Send a signal to a Crawler",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "signal": {
                                        "type": "string",
                                        "enum": [
                                            "start",
                                            "stop",
                                            "pause"
                                        ],
                                        "example": "stop",
                                        "description": "The signal to send to the Crawler."
                                    }
                                },
                                "required": [
                                    "signal"
                                ]
                            },
                            "examples": {
                                "Signal Crawler to stop": {
                                    "value": {
                                        "signal": "stop"
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [],
                "operationId": "signalCrawler"
            }
        },
        "/api/v0/datasystem/lds/{id}/estimators": {
            "get": {
                "summary": "Get all Estimators for this LDS",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "object": {
                                            "type": "string",
                                            "enum": [
                                                "list"
                                            ],
                                            "example": "list",
                                            "pattern": "list"
                                        },
                                        "item_type": {
                                            "type": "string",
                                            "description": "The type of objects stored in the list",
                                            "enum": [
                                                "estimator"
                                            ],
                                            "example": "estimator",
                                            "pattern": "estimator"
                                        },
                                        "has_more": {
                                            "type": "boolean",
                                            "example": "false"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Estimator"
                                            }
                                        }
                                    },
                                    "required": [
                                        "object",
                                        "item_type",
                                        "has_more",
                                        "data"
                                    ]
                                },
                                "examples": {
                                    "All Estimators": {
                                        "value": {
                                            "object": "list",
                                            "item_type": "estimator",
                                            "has_more": false,
                                            "data": [
                                                {
                                                    "id": "b9d93e94-77b5-4333-9136-1944b516c47f",
                                                    "object": "estimator",
                                                    "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                                    "created": "2018-11-13T20:20:39+00:00",
                                                    "modifed": "2018-11-13T20:20:39+00:00",
                                                    "crawler_id": "9eea810f-1fb5-4837-81b8-85425b80d133",
                                                    "type": "starts_with",
                                                    "entity": "account",
                                                    "estimate_field": "company",
                                                    "distribution": [
                                                        0,
                                                        100,
                                                        300000
                                                    ],
                                                    "estimation_queries": [
                                                        "abc",
                                                        "xyz"
                                                    ],
                                                    "max_queries": 100
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Retrieve all Estimators associatd with this Crawler.",
                "parameters": [],
                "operationId": "getCrawlerEstimators"
            },
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "description": "uuid",
                    "required": true
                }
            ]
        },
        "/api/v0/datasystem/estimator/{id}": {
            "get": {
                "summary": "Get Estimator by ID",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Estimator"
                                },
                                "examples": {
                                    "Estimator": {
                                        "value": {
                                            "id": "b9d93e94-77b5-4333-9136-1944b516c47f",
                                            "object": "estimator",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00",
                                            "crawler_id": "9eea810f-1fb5-4837-81b8-85425b80d133",
                                            "type": "starts_with",
                                            "entity": "account",
                                            "estimate_field": "company",
                                            "distribution": [
                                                0,
                                                100,
                                                300000
                                            ],
                                            "estimation_queries": [
                                                "abc",
                                                "xyz"
                                            ],
                                            "max_queries": 100
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Retrieve an Estimator.",
                "parameters": [],
                "operationId": "getEstimatorById"
            },
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "description": "uuid",
                    "required": true
                }
            ],
            "post": {
                "summary": "Update Estimator",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Estimator"
                                },
                                "examples": {
                                    "Updated Estimator": {
                                        "value": {
                                            "id": "b9d93e94-77b5-4333-9136-1944b516c47f",
                                            "object": "estimator",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00",
                                            "crawler_id": "9eea810f-1fb5-4837-81b8-85425b80d133",
                                            "type": "starts_with",
                                            "entity": "account",
                                            "estimate_field": "company",
                                            "distribution": [
                                                0,
                                                100,
                                                300000
                                            ],
                                            "estimation_queries": [
                                                "abc",
                                                "xyz"
                                            ],
                                            "max_queries": 100
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Update a Estimator.",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "estimate_field": {
                                        "type": "string",
                                        "description": "The estimator's estimate field.",
                                        "example": "first_name"
                                    }
                                },
                                "required": [
                                    "estimate_field"
                                ]
                            },
                            "examples": {
                                "Update Estimator": {
                                    "value": {
                                        "estimate_field": "first_name"
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [],
                "operationId": "updateEstimator"
            }
        },
        "/api/v0/datasystem/crawlers/{id}/lds": {
            "get": {
                "summary": "Get the one LDS used by this Crawler",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LDS"
                                },
                                "examples": {
                                    "LDS Response": {
                                        "value": {
                                            "id": "6f0cc9c0-3bd3-4bcc-aee2-e8ebb015f6a3",
                                            "object": "lds",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00",
                                            "crawler_id": "9eea810f-1fb5-4837-81b8-85425b80d133",
                                            "index_can_be_queried": true,
                                            "last_scan_entity": "account",
                                            "entities": [
                                                {
                                                    "name": "lead",
                                                    "key": "id",
                                                    "fields": [
                                                        "id",
                                                        "first",
                                                        "last"
                                                    ],
                                                    "index_fields": [
                                                        "id",
                                                        "first",
                                                        "last"
                                                    ],
                                                    "changed": false,
                                                    "can_be_queried": true,
                                                    "last_scan_time": 300000,
                                                    "last_crawl_time": 300000,
                                                    "last_record_time": 300000,
                                                    "current_slice": 291,
                                                    "total_slices": 300
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Retrieve the one LDS used by this Crawler.",
                "parameters": [],
                "operationId": "getCrawlerLDS"
            },
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "description": "uuid",
                    "required": true
                }
            ]
        },
        "/api/v0/datasystem/lds/{id}": {
            "get": {
                "summary": "Get LDS by ID",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LDS"
                                },
                                "examples": {
                                    "LDS": {
                                        "value": {
                                            "id": "6f0cc9c0-3bd3-4bcc-aee2-e8ebb015f6a3",
                                            "object": "lds",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00",
                                            "crawler_id": "9eea810f-1fb5-4837-81b8-85425b80d133",
                                            "index_can_be_queried": true,
                                            "last_scan_entity": "account",
                                            "entities": [
                                                {
                                                    "name": "lead",
                                                    "key": "id",
                                                    "fields": [
                                                        "id",
                                                        "first",
                                                        "last"
                                                    ],
                                                    "index_fields": [
                                                        "id",
                                                        "first",
                                                        "last"
                                                    ],
                                                    "changed": false,
                                                    "can_be_queried": true,
                                                    "last_scan_time": 300000,
                                                    "last_crawl_time": 300000,
                                                    "last_record_time": 300000,
                                                    "current_slice": 291,
                                                    "total_slices": 300
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Retrieve an LDS.",
                "parameters": [],
                "operationId": "getLDSById"
            },
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "description": "uuid",
                    "required": true
                }
            ],
            "post": {
                "summary": "Update LDS",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LDS"
                                },
                                "examples": {
                                    "Updated LDS": {
                                        "value": {
                                            "id": "6f0cc9c0-3bd3-4bcc-aee2-e8ebb015f6a3",
                                            "object": "lds",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00",
                                            "crawler_id": "9eea810f-1fb5-4837-81b8-85425b80d133",
                                            "index_can_be_queried": true,
                                            "last_scan_entity": "account",
                                            "entities": [
                                                {
                                                    "name": "lead",
                                                    "key": "id",
                                                    "fields": [
                                                        "id",
                                                        "first",
                                                        "last"
                                                    ],
                                                    "index_fields": [
                                                        "id",
                                                        "first",
                                                        "last"
                                                    ],
                                                    "changed": false,
                                                    "can_be_queried": true,
                                                    "last_scan_time": 300000,
                                                    "last_crawl_time": 300000,
                                                    "last_record_time": 300000,
                                                    "current_slice": 291,
                                                    "total_slices": 300
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Update a LDS.",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LDSCreate"
                            },
                            "examples": {
                                "Update LDS": {
                                    "value": {
                                        "name": "account",
                                        "key": "account_id",
                                        "fields": [
                                            "company",
                                            "phone"
                                        ],
                                        "index_fields": [
                                            "company"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [],
                "operationId": "updateLDS"
            }
        },
        "/api/v0/datasystem/connections/{id}/entities": {
            "get": {
                "summary": "Get Connection Entities and Fields",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "object": {
                                            "type": "string",
                                            "enum": [
                                                "list"
                                            ],
                                            "example": "list",
                                            "pattern": "list"
                                        },
                                        "item_type": {
                                            "type": "string",
                                            "description": "The type of objects stored in the list",
                                            "enum": [
                                                "entity"
                                            ],
                                            "example": "entity",
                                            "pattern": "entity"
                                        },
                                        "has_more": {
                                            "type": "boolean",
                                            "example": "false"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "object": {
                                                        "type": "string",
                                                        "enum": [
                                                            "entity"
                                                        ],
                                                        "example": "entity",
                                                        "pattern": "entity"
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "example": "contact",
                                                        "description": "The entity name (back-end database name)."
                                                    },
                                                    "label": {
                                                        "type": "string",
                                                        "example": "Person",
                                                        "description": "The label or UI name for the entity."
                                                    },
                                                    "type": {
                                                        "type": "string",
                                                        "example": "Contact",
                                                        "description": "The entity type, like Contact or Account."
                                                    },
                                                    "fields": {
                                                        "type": "array",
                                                        "example": "[{'name':'first','label':'First Name','type':'FirstName'}]",
                                                        "description": "The list of fields on the entity.",
                                                        "items": {
                                                            "type": "object",
                                                            "properties": {
                                                                "name": {
                                                                    "type": "string",
                                                                    "example": "first_name",
                                                                    "description": "The field back-end name."
                                                                },
                                                                "label": {
                                                                    "type": "string",
                                                                    "example": "First Name",
                                                                    "description": "The field's label or front end name."
                                                                },
                                                                "type": {
                                                                    "type": "string",
                                                                    "example": "FirstName",
                                                                    "description": "The field type, like FirstName, City, Country."
                                                                }
                                                            },
                                                            "required": [
                                                                "name",
                                                                "label",
                                                                "type"
                                                            ]
                                                        }
                                                    }
                                                },
                                                "required": [
                                                    "object",
                                                    "name",
                                                    "label",
                                                    "type",
                                                    "fields"
                                                ]
                                            }
                                        }
                                    },
                                    "required": [
                                        "object",
                                        "item_type",
                                        "has_more"
                                    ]
                                },
                                "examples": {
                                    "Entities and Fields": {
                                        "value": {
                                            "object": "list",
                                            "item_type": "entity",
                                            "has_more": false,
                                            "data": [
                                                {
                                                    "object": "entity",
                                                    "name": "contact",
                                                    "label": "Person",
                                                    "type": "Contact",
                                                    "fields": [
                                                        {
                                                            "name": "firstname",
                                                            "label": "First Name",
                                                            "type": "FirstName"
                                                        },
                                                        {
                                                            "name": "lastname",
                                                            "label": "Last Name",
                                                            "type": "LastName"
                                                        },
                                                        {
                                                            "name": "blahblahblah",
                                                            "label": "Yada Yada",
                                                            "type": ""
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Get the connections entities and fields on each entity.",
                "parameters": [],
                "operationId": "getConnectionEntities"
            },
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "description": "uuid",
                    "required": true
                }
            ]
        },
        "/api/v0/datasystem/writeservice/writegroup/submit": {
            "post": {
                "summary": "Submit a group of write commands to the write service",
                "operationId": "submitGroupOfWriteCommands",
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "group_id": {
                                            "type": "string",
                                            "example": "e73d1987-119a-4beb-8ba4-70192751bf04",
                                            "description": "The id of the write commands group (all commands submitted in one request are assigned to a group)."
                                        },
                                        "write_command_ids": {
                                            "type": "array",
                                            "description": "The ids associated with each write command. This will be the same length as the length of the list of commands submitted.",
                                            "items": {
                                                "type": "string",
                                                "example": "[     \"7acb14b9-5751-425d-abee-961c35cbaf34\",     \"8acb14b9-5751-425d-abee-961c35cbaf34\",     \"9acb14b9-5751-425d-abee-961c35cbaf34\"   ]"
                                            }
                                        }
                                    },
                                    "required": [
                                        "group_id",
                                        "write_command_ids"
                                    ]
                                },
                                "examples": {
                                    "Example response from submit write commands": {
                                        "value": {
                                            "group_id": "e73d1987-119a-4beb-8ba4-70192751bf04",
                                            "write_command_ids": [
                                                "7acb14b9-5751-425d-abee-961c35cbaf34",
                                                "8acb14b9-5751-425d-abee-961c35cbaf34",
                                                "9acb14b9-5751-425d-abee-961c35cbaf34"
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Submit a group (list) of write commands to the Write Service.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WriteGroup"
                            },
                            "examples": {
                                "Example Submit Write Commands": {
                                    "value": {
                                        "id": "347330b6-5593-48f4-8738-4461a087e567",
                                        "object": "writecommands",
                                        "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                        "created": "2018-11-13T20:20:39+00:00",
                                        "modifed": "2018-11-13T20:20:39+00:00",
                                        "account_id": "d463677e-2060-4db0-8985-35585a8bc90c",
                                        "connection_id": "9b40c303-4fce-4482-89a3-6df6a1eea6df",
                                        "write_commands": [
                                            {
                                                "command": "merge",
                                                "entity": "Lead",
                                                "ids": [
                                                    "primary_id",
                                                    "secondary_id_1",
                                                    "secondary_id_2"
                                                ]
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "description": ""
                }
            },
            "parameters": []
        },
        "/api/v0/datasystem/writeservice/writegroup/{id}/status": {
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "description": "uuid",
                    "required": true
                }
            ],
            "post": {
                "summary": "",
                "operationId": "getWriteGroupStatus",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "enum": [
                                                "waiting",
                                                "writing",
                                                "done",
                                                "error"
                                            ],
                                            "example": "done",
                                            "description": "The write status of the group of write commands."
                                        },
                                        "command_status": {
                                            "type": "array",
                                            "example": null,
                                            "description": "The status of each command.",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "status": {
                                                        "type": "string",
                                                        "enum": [
                                                            "waiting",
                                                            "writing",
                                                            "done",
                                                            "error"
                                                        ],
                                                        "example": "done",
                                                        "description": "The write status of this specific command."
                                                    },
                                                    "command_id": {
                                                        "type": "string",
                                                        "description": "The id of the command",
                                                        "example": "7acb14b9-5751-425d-abee-961c35cbaf34"
                                                    },
                                                    "error_text": {
                                                        "type": "string",
                                                        "description": "Some text describing any error data, if writing failed."
                                                    }
                                                },
                                                "required": [
                                                    "status",
                                                    "command_id"
                                                ]
                                            }
                                        }
                                    },
                                    "required": [
                                        "status",
                                        "command_status"
                                    ]
                                },
                                "examples": {
                                    "Example response from write group status": {
                                        "value": {
                                            "status": "e73d1987-119a-4beb-8ba4-70192751bf04",
                                            "command_status": [
                                                {
                                                    "command_id": "7acb14b9-5751-425d-abee-961c35cbaf34",
                                                    "status": "done"
                                                },
                                                {
                                                    "command_id": "8acb14b9-5751-425d-abee-961c35cbaf34",
                                                    "status": "done"
                                                },
                                                {
                                                    "command_id": "9acb14b9-5751-425d-abee-961c35cbaf34",
                                                    "status": "error",
                                                    "error_text": "Failed to merge for some reason"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Get the status of a write group"
            }
        },
        "/api/v0/game/score_summary/{entity_type}/{owner_id}/{period}": {
            "post": {
                "summary": "Rate ActivePrime DupeSet",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "Signup Response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "examples": {}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "operationId": "getScoreSummaryByUserId",
                "description": "Retrieve the ScoreSummary for a User.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "star_rating": {
                                        "type": "integer",
                                        "description": "The star rating for this DupeSet. A value between 1 and 5.",
                                        "example": 5,
                                        "minimum": 1,
                                        "maximum": 5
                                    },
                                    "feedback": {
                                        "type": "string",
                                        "example": "caught the duplicate perfectly",
                                        "description": "The text feedback from the customer."
                                    },
                                    "feedback_code": {
                                        "type": "string",
                                        "description": "The feedback code. perfect, false_positives, false_negatives, other. If other, then feedback could contain text from the user providing details of their specific feedback.",
                                        "enum": [
                                            "perfect",
                                            "false_positives",
                                            "false_negatives",
                                            "other"
                                        ],
                                        "example": "perfect"
                                    }
                                },
                                "required": [
                                    "star_rating",
                                    "feedback",
                                    "feedback_code"
                                ]
                            },
                            "examples": {
                                "Example Star Feedback Request": {
                                    "value": {
                                        "star_rating": 5,
                                        "feedback_code": "perfect",
                                        "feedback_text": ""
                                    }
                                }
                            }
                        }
                    },
                    "description": ""
                }
            },
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/api/v0/gratitude/dupe_set/{id}/rate": {
            "post": {
                "summary": "Rate ActivePrime DupeSet",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "Signup Response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "examples": {}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "operationId": "rate_dupe_set",
                "description": "Rate the DupeSet results.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "star_rating": {
                                        "type": "integer",
                                        "description": "The star rating for this DupeSet. A value between 1 and 5.",
                                        "example": 5,
                                        "minimum": 1,
                                        "maximum": 5
                                    },
                                    "feedback": {
                                        "type": "string",
                                        "example": "caught the duplicate perfectly",
                                        "description": "The text feedback from the customer."
                                    },
                                    "feedback_code": {
                                        "type": "string",
                                        "description": "The feedback code. perfect, false_positives, false_negatives, other. If other, then feedback could contain text from the user providing details of their specific feedback.",
                                        "enum": [
                                            "perfect",
                                            "false_positives",
                                            "false_negatives",
                                            "other"
                                        ],
                                        "example": "perfect"
                                    }
                                },
                                "required": [
                                    "star_rating",
                                    "feedback",
                                    "feedback_code"
                                ]
                            },
                            "examples": {
                                "Example Star Feedback Request": {
                                    "value": {
                                        "star_rating": 5,
                                        "feedback_code": "perfect",
                                        "feedback_text": ""
                                    }
                                }
                            }
                        }
                    },
                    "description": ""
                }
            },
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/api/v0/gratitude/refer_a_friend": {
            "post": {
                "summary": "Refer a Friend",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "Signup Response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "examples": {}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "operationId": "refer_a_friend",
                "description": "Refer a friend to ActivePrime.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "description": "The email of the friend to refer.",
                                        "format": "email",
                                        "example": "joe@someemail.com"
                                    }
                                },
                                "required": [
                                    "email"
                                ]
                            },
                            "examples": {
                                "Example Refer a Friend Request": {
                                    "value": {
                                        "email": "joe@someemail.com"
                                    }
                                }
                            }
                        }
                    },
                    "description": ""
                }
            },
            "parameters": []
        },
        "/api/v0/datasystem/crawlers/{id}/read_records": {
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "required": true
                }
            ],
            "post": {
                "summary": "Read Records from Crawler",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "columns": {
                                            "type": "array",
                                            "example": "9b40c303-4fce-4482-89a3-6df6a1eea6df",
                                            "description": "A list of strings. Each string is a column name.",
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "data": {
                                            "type": "array",
                                            "description": "A list of lists. Each list is a column of data.",
                                            "items": {
                                                "type": "string",
                                                "example": "[[\"Joe\",\"smith\",\"123\"],[\"Jill\",\"johnson\",\"456\"]]"
                                            }
                                        }
                                    },
                                    "required": [
                                        "columns",
                                        "data"
                                    ]
                                },
                                "examples": {
                                    "Crawler read_records response": {
                                        "value": {
                                            "columns": [
                                                "first",
                                                "last",
                                                "id"
                                            ],
                                            "data": [
                                                [
                                                    "joe",
                                                    "smith",
                                                    "123"
                                                ],
                                                [
                                                    "jill",
                                                    "johnson",
                                                    "456"
                                                ]
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Read (query) records from the crawler's LDS",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "select": {
                                        "type": [
                                            "array",
                                            "string"
                                        ],
                                        "description": "Like a SQL select statement. The list of fields to retrieve, or \"*\" to retrieve all fields.",
                                        "example": "\"*\"",
                                        "items": {
                                            "type": "string",
                                            "example": "[\"first\",\"last\",\"phone\",\"id\"]"
                                        }
                                    },
                                    "entity": {
                                        "type": "string",
                                        "example": "Account",
                                        "description": "The name of the entity to query."
                                    },
                                    "where": {
                                        "type": [
                                            "string",
                                            "array",
                                            "null"
                                        ],
                                        "description": "Like a SQL where clause. If a string, then treat like where clause. If list, this is a list of IDs to read. If null, read all.",
                                        "items": {}
                                    },
                                    "where_field": {
                                        "type": "string",
                                        "description": "The name of the field for where. See crawler LocalDataStore code for details."
                                    }
                                },
                                "required": [
                                    "select",
                                    "entity",
                                    "where"
                                ]
                            },
                            "examples": {
                                "Example read_records List of IDs": {
                                    "value": {
                                        "select": [
                                            "first",
                                            "last",
                                            "id"
                                        ],
                                        "entity": "Contact",
                                        "where": [
                                            "123",
                                            "456"
                                        ]
                                    }
                                },
                                "Example read_records All": {
                                    "value": {
                                        "select": [
                                            "first",
                                            "last",
                                            "id"
                                        ],
                                        "entity": "Contact",
                                        "where": null
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [],
                "operationId": "readRecordsFromCrawlerLds"
            }
        },
        "/api/v0/datasystem/crawlers/{id}/read_ngrams": {
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "required": true
                }
            ],
            "post": {
                "summary": "Read Ngrams from Crawler LDS",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "ngrams": {
                                            "type": "array",
                                            "example": "9b40c303-4fce-4482-89a3-6df6a1eea6df",
                                            "description": "A list of strings. Each string is the ngram.",
                                            "items": {
                                                "type": "string",
                                                "example": "[\"Six\",\"Two\" ]"
                                            }
                                        },
                                        "fields": {
                                            "type": "array",
                                            "description": "A list strings. Each string is a field name.",
                                            "items": {
                                                "type": "string",
                                                "example": "[\"BillingStreet\",\"BillingStreet\"]"
                                            }
                                        },
                                        "ids": {
                                            "type": "array",
                                            "description": "A list of strings.Each string is an ID.",
                                            "items": {
                                                "type": "string",
                                                "example": "[\"0016g00000RP3MwAAL\", \"0016g00000RP3MAAA1\"]"
                                            }
                                        }
                                    },
                                    "required": [
                                        "ngrams",
                                        "fields",
                                        "ids"
                                    ]
                                },
                                "examples": {
                                    "Crawler read_ngrams response": {
                                        "value": {
                                            "fields": [
                                                "BillingStreet",
                                                "BillingStreet"
                                            ],
                                            "ids": [
                                                "0016g00000RP3MwAAL",
                                                "0016g00000RP3MAAA1"
                                            ],
                                            "ngrams": [
                                                "Six",
                                                "Two"
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Read (query) ngrams from the crawler's LDS",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "entity": {
                                        "type": "string",
                                        "example": "Account",
                                        "description": "The name of the entity to query."
                                    },
                                    "where": {
                                        "type": "array",
                                        "description": "The list of ngrams.",
                                        "items": {
                                            "type": "string",
                                            "example": "[\"one\", \"two\", \"three\"]"
                                        }
                                    }
                                },
                                "required": [
                                    "entity",
                                    "where"
                                ]
                            },
                            "examples": {
                                "Example read_ngrams": {
                                    "value": {
                                        "entity": "Account",
                                        "where": [
                                            "one",
                                            "two"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [],
                "operationId": "readNgramsFromCrawlerLds"
            }
        },
        "/api/v0/datasystem/crawlers/{id}/get_schema": {
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "required": true
                }
            ],
            "get": {
                "summary": "Get Schemas",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/EntitySchema"
                                    }
                                },
                                "examples": {
                                    "All Schemas": {
                                        "value": [
                                            {
                                                "blocking_filter": null,
                                                "db_entity": "ap_Contact",
                                                "db_fields": [
                                                    "ap_first",
                                                    "ap_last",
                                                    "ap_id"
                                                ],
                                                "entity": "Contact",
                                                "fields": [
                                                    "first",
                                                    "last",
                                                    "id"
                                                ],
                                                "index_fields": [
                                                    "first",
                                                    "last",
                                                    "id"
                                                ],
                                                "key": "id",
                                                "parent": null
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "operationId": "getSchemas",
                "description": "Get all schemas associated with this crawler"
            }
        },
        "/api/v0/datasystem/crawlers/{id}/update_schema": {
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "required": true
                }
            ],
            "post": {
                "summary": "Update Schema",
                "operationId": "updateSchema",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Update the schema. \n\nDocs from crawler python code\n\nThis function DOES NOT update the data in the entity tables. It ONLY\nupdates the schema and the info table with which entities have been\nchanged.\n        \nThis function is typically called when an ActivePrime app has it's\nconfig changed by the admin user. This function propagates those\nchanges from the UI and the config settings to the LDS schema.\n        \nFor instance, if the user adds Account.phone as a field to be index,\nthen entities would contain the original entities and their fields as\nwell as the phone field on the Account entity. This function then\nensures the LDS schema is udpated with the phone field.\n        \nThe logic is as follows:\n* If LDS has entity not in entities\n    * Remove the entities from LDS schema.\n* If entities has entity not in LDS\n    * Add the entities to LDS schema.\n* If entities has fields not in LDS\n    * Add the fields to the entity in LDS schema.\n* If LDS has fields not in entities\n    * Remove the fields from the entity in LDS schema.\n    * If all fields removed from LDS entity\n        * Remove the entity\n",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateEntitySchema"
                            },
                            "examples": {
                                "Example Update EntitySchema": {
                                    "value": {
                                        "entity": "Contact",
                                        "fields": [
                                            "first",
                                            "last",
                                            "id",
                                            "phone"
                                        ],
                                        "index_fields": [
                                            "first",
                                            "last",
                                            "id",
                                            "phone"
                                        ],
                                        "key": "id"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v0/rule/rules": {
            "get": {
                "summary": "Get rules",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "object": {
                                            "type": "string",
                                            "enum": [
                                                "list"
                                            ],
                                            "example": "list",
                                            "pattern": "list"
                                        },
                                        "item_type": {
                                            "type": "string",
                                            "description": "The type of objects stored in the list",
                                            "example": "rule",
                                            "pattern": "rule",
                                            "enum": [
                                                "rule"
                                            ]
                                        },
                                        "has_more": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Rule"
                                            }
                                        }
                                    },
                                    "required": [
                                        "object",
                                        "item_type",
                                        "has_more",
                                        "data"
                                    ]
                                },
                                "examples": {
                                    "All Rules Example Response": {
                                        "value": {
                                            "object": "list",
                                            "item_type": "rule",
                                            "has_more": false,
                                            "data": [
                                                {
                                                    "id": "a5409032-6ca8-4953-98a4-a1349f7f60e7",
                                                    "object": "rule",
                                                    "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                                    "created": "2018-11-13T20:20:39+00:00",
                                                    "modifed": "2018-11-13T20:20:39+00:00",
                                                    "account_id": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5",
                                                    "name": "Match leads to contacts",
                                                    "description": "Find matching leads and contacts.",
                                                    "type": "",
                                                    "rule": "{}",
                                                    "entities": [
                                                        "account"
                                                    ]
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "List Rules",
                "parameters": [],
                "operationId": "getRules"
            },
            "post": {
                "summary": "Create a Rule",
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Rule"
                                },
                                "examples": {
                                    "Created Rule Example Response": {
                                        "value": {
                                            "id": "a5409032-6ca8-4953-98a4-a1349f7f60e7",
                                            "object": "rule",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00",
                                            "account_id": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5",
                                            "name": "usa_accounts",
                                            "description": "Accounts in the USA",
                                            "type": "Filter",
                                            "rule": "{}",
                                            "entities": [
                                                "account"
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Create a Rule.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RuleUpsert"
                            },
                            "examples": {
                                "Create a Rule": {
                                    "value": {
                                        "name": "usa_accounts",
                                        "description": "Accounts in the USA",
                                        "type": "Filter",
                                        "rule": "{}",
                                        "entities": [
                                            "account"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "description": ""
                },
                "operationId": "createRule"
            },
            "parameters": []
        },
        "/api/v0/rule/rules/{id}": {
            "get": {
                "summary": "Get Rule by ID",
                "tags": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Rule"
                                },
                                "examples": {
                                    "Rule": {
                                        "value": {
                                            "id": "a5409032-6ca8-4953-98a4-a1349f7f60e7",
                                            "object": "rule",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00",
                                            "account_id": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5",
                                            "name": "usa_accounts",
                                            "description": "Accounts in the USA",
                                            "type": "Filter",
                                            "rule": {
                                                "class": "OrClause",
                                                "config": [
                                                    {
                                                        "class": "AndClause",
                                                        "config": {
                                                        "conditions": [
                                                            {
                                                                "algo": "exact",
                                                                "field": "Email",
                                                                "negate": false,
                                                                "match_field": "Email",
                                                                "case_sensitive": true,
                                                                "value": "joe.smith@gmail.com"
                                                            }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "class": "AndClause",
                                                        "config": {
                                                            "conditions": [
                                                            {
                                                                "algo": "fuzzy",
                                                                "field": "First Name",
                                                                "negate": false,
                                                                "match_field": "first",
                                                                "case_sensitive": true,
                                                                "value": "Joe"
                                                            },
                                                            {
                                                                "algo": "fuzzy",
                                                                "field": "Last Name",
                                                                "negate": false,
                                                                "match_field": "last",
                                                                "case_sensitive": true,
                                                                "value": "Smith"
                                                            }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            },
                                            "entities": [
                                                "account"
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Retrieve a Rule.",
                "parameters": [],
                "operationId": "getRuleById",
                "security": [
                    {
                        "JWT": []
                    }
                ]
            },
            "parameters": [
                {
                    "schema": {
                        "type": "string"
                    },
                    "name": "id",
                    "in": "path",
                    "description": "uuid",
                    "required": true
                }
            ],
            "delete": {
                "summary": "Delete Rule",
                "responses": {
                    "200": {
                        "description": "Deletion was successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                },
                                "examples": {
                                    "example-1": {}
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Delete a Rule.",
                "operationId": "deleteRule"
            },
            "post": {
                "summary": "Update Rule",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Rule"
                                },
                                "examples": {
                                    "Updated Rule Example Response": {
                                        "value": {
                                            "id": "a5409032-6ca8-4953-98a4-a1349f7f60e7",
                                            "object": "rule",
                                            "owner_id": "090e24d3-34c6-49cb-846b-57af9cbff1fe",
                                            "created": "2018-11-13T20:20:39+00:00",
                                            "modifed": "2018-11-13T20:20:39+00:00",
                                            "account_id": "92f3d0f3-a3e9-4f62-9d68-a571df3d84d5",
                                            "name": "usa_accounts",
                                            "description": "Accounts in the USA",
                                            "type": "Filter",
                                            "rule": "{}",
                                            "entities": [
                                                "account"
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "404": {
                        "description": "Could not find the object."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Update a Rule.",
                "requestBody": {
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RuleUpsert"
                            },
                            "examples": {
                                "Update Rule Example": {
                                    "value": {
                                        "name": "usa_accounts",
                                        "description": "Accounts in the USA",
                                        "type": "Filter",
                                        "rule": "{}",
                                        "entities": [
                                            "account"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [],
                "operationId": "updateRule"
            }
        },
        "/api/v0/smelter/assignment/run": {
            "post": {
                "summary": "Run an assignment rule",
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "assigned_to": {
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "assigned_to"
                                    ]
                                },
                                "examples": {
                                    "Assignment Rule Result": {
                                        "value": {
                                            "assign_to": {
                                                "user": {
                                                    "key": "user_id_123"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Run an assignment rule.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "dupe_set": {
                                        "$ref": "#/components/schemas/DupeSet"
                                    },
                                    "rule": {
                                        "type": "array",
                                        "items": {
                                            "type": "object"
                                        }
                                    }
                                },
                                "required": [
                                    "dupe_set",
                                    "rule"
                                ]
                            },
                            "examples": {
                                "Assignment Rule to Run": {
                                    "value": {
                                        "dupe_set": {
                                            "id": "ce698f45-4a53-4c4c-997d-115fea7924ac",
                                            "entity": "Account",
                                            "records": [
                                                {
                                                    "first": "joe",
                                                    "last": "smith"
                                                }
                                            ],
                                            "schema": {
                                                "first": "str",
                                                "last": "str"
                                            },
                                            "primary_id": 0,
                                            "ownership_field": "owner",
                                            "mcs_rating": "Low"
                                        },
                                        "rule": [
                                            {
                                                "conditional": "if",
                                                "operator": "is_multi_owner",
                                                "assign_to": {
                                                    "role": "admin"
                                                }
                                            },
                                            {
                                                "conditional": "else if",
                                                "operator": "mcs_is_low",
                                                "assign_to": {
                                                    "owners": "admin"
                                                }
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "description": ""
                },
                "operationId": "runAssignmentRule"
            },
            "parameters": []
        },
        "/api/v0/smelter/primary/run": {
            "post": {
                "summary": "Run a primary rule",
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "primary_id": {
                                            "type": "integer",
                                            "description": "The index (id) of the primary record.",
                                            "example": "{\"primary_id\":0}"
                                        }
                                    },
                                    "required": [
                                        "primary_id"
                                    ]
                                },
                                "examples": {
                                    "Primary Rule Result": {
                                        "value": {
                                            "primary_id": 0
                                        }
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Run a primary rule.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "dupe_set": {
                                        "$ref": "#/components/schemas/DupeSet"
                                    },
                                    "rule": {
                                        "type": "array",
                                        "items": {
                                            "type": "object"
                                        }
                                    }
                                },
                                "required": [
                                    "dupe_set",
                                    "rule"
                                ]
                            },
                            "examples": {
                                "Primary Rule to Run": {
                                    "value": {
                                        "dupe_set": {
                                            "id": "ce698f45-4a53-4c4c-997d-115fea7924ac",
                                            "entity": "Account",
                                            "records": [
                                                {
                                                    "first": "joe",
                                                    "last": "smith"
                                                }
                                            ],
                                            "schema": {
                                                "first": "str",
                                                "last": "str"
                                            },
                                            "primary_id": 0,
                                            "ownership_field": "owner",
                                            "mcs_rating": "Low"
                                        },
                                        "rule": [
                                            {}
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "description": ""
                },
                "operationId": "runPrimaryRule"
            },
            "parameters": []
        },
        "/api/v0/smelter/rollup/run": {
            "post": {
                "summary": "Run a rollup rule",
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                },
                                "examples": {
                                    "Rollup Rule Result": {
                                        "value": {}
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Run a rollup rule.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "dupe_set": {
                                        "$ref": "#/components/schemas/DupeSet"
                                    },
                                    "rule": {
                                        "type": "array",
                                        "items": {
                                            "type": "object"
                                        }
                                    }
                                },
                                "required": [
                                    "dupe_set",
                                    "rule"
                                ]
                            },
                            "examples": {
                                "Rollup Rule to Run": {
                                    "value": {
                                        "dupe_set": {
                                            "id": "ce698f45-4a53-4c4c-997d-115fea7924ac",
                                            "entity": "Account",
                                            "records": [
                                                {
                                                    "first": "joe",
                                                    "last": "smith"
                                                }
                                            ],
                                            "schema": {
                                                "first": "str",
                                                "last": "str"
                                            },
                                            "primary_id": 0,
                                            "ownership_field": "owner",
                                            "mcs_rating": "Low"
                                        },
                                        "rule": [
                                            {}
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "description": ""
                },
                "operationId": "runRollupRule"
            },
            "parameters": []
        },
        "/api/v0/smelter/write/run": {
            "post": {
                "summary": "Run a write rule",
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object"
                                    }
                                },
                                "examples": {
                                    "Write Rule Result": {
                                        "value": [
                                            {
                                                "command": "merge",
                                                "entity": "Lead",
                                                "ids": [
                                                    "primary_id",
                                                    "secondary_id_1",
                                                    "secondary_id_2"
                                                ]
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "headers": {
                            "Request-Id": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Request uuid",
                                "required": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. The data from the client is invalid."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden. Improper permissions for this operation."
                    },
                    "500": {
                        "description": "Internal Server Error. For some unknown reason the server failed."
                    },
                    "503": {
                        "description": "Service Unavailable. Please try again later."
                    }
                },
                "description": "Run a write rule.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "dupe_set": {
                                        "$ref": "#/components/schemas/DupeSet"
                                    },
                                    "rule": {
                                        "type": "array",
                                        "items": {
                                            "type": "object"
                                        }
                                    }
                                },
                                "required": [
                                    "dupe_set",
                                    "rule"
                                ]
                            },
                            "examples": {
                                "Write Rule to Run": {
                                    "value": {
                                        "dupe_set": {
                                            "id": "ce698f45-4a53-4c4c-997d-115fea7924ac",
                                            "entity": "Account",
                                            "records": [
                                                {
                                                    "first": "joe",
                                                    "last": "smith"
                                                }
                                            ],
                                            "schema": {
                                                "first": "str",
                                                "last": "str"
                                            },
                                            "primary_id": 0,
                                            "ownership_field": "owner",
                                            "mcs_rating": "Low"
                                        },
                                        "rule": [
                                            {
                                                "contains": [
                                                    "Account",
                                                    "Lead"
                                                ],
                                                "actions": [
                                                    {
                                                        "entity": "Account",
                                                        "action": "merge"
                                                    },
                                                    {
                                                        "entity": "Lead",
                                                        "action": "associate",
                                                        "parent_entity": "Account"
                                                    }
                                                ]
                                            },
                                            {
                                                "contains": [
                                                    "Account"
                                                ],
                                                "actions": [
                                                    {
                                                        "entity": "Account",
                                                        "action": "merge"
                                                    }
                                                ]
                                            },
                                            {
                                                "contains": [
                                                    "Lead"
                                                ],
                                                "actions": [
                                                    {
                                                        "entity": "Lead",
                                                        "actions": "merge"
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "description": ""
                },
                "operationId": "runWriteRule"
            },
            "parameters": []
        }
    },
    "servers": [
        {
            "url": "/api/v0",
            "description": ""
        }
    ]
}
